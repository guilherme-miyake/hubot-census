{"_id":"hubot-auth-middleware-ext","_rev":"1-c236e8c66d01c20291fa74c7428e845c","name":"hubot-auth-middleware-ext","description":"Use roles, rooms, and envs to restrict command access in other scripts","dist-tags":{"latest":"0.0.1"},"versions":{"0.0.1":{"name":"hubot-auth-middleware-ext","description":"Use roles, rooms, and envs to restrict command access in other scripts","version":"0.0.1","contributors":[],"license":"MIT","keywords":["hubot","hubot-scripts","middleware","authentication","roles","rooms","environments"],"repository":{"type":"git","url":"git://github.com/jmcshane/hubot-auth-middleware.git"},"bugs":{"url":"https://github.com/jmcshane/hubot-auth-middleware/issues"},"dependencies":{},"devDependencies":{"hubot":"2.x","hubot-auth":">=1.x","hubot-mock-adapter":"1.0.0","coffee-script":"1.6.3","chai":"3.5.0","mocha":"2.4.5"},"scripts":{"test":"mocha --compilers coffee:coffee-script"},"main":"index.coffee","gitHead":"6afbaed6dc420624deeead346052c58610852106","homepage":"https://github.com/jmcshane/hubot-auth-middleware#readme","_id":"hubot-auth-middleware-ext@0.0.1","_shasum":"7295886bfd7c06db91a13b2eb30f3cc6f3f2bb35","_from":".","_npmVersion":"4.0.5","_nodeVersion":"7.4.0","_npmUser":{"name":"jmcshane","email":"jmcshan1@gmail.com"},"dist":{"shasum":"7295886bfd7c06db91a13b2eb30f3cc6f3f2bb35","tarball":"https://registry.npmjs.org/hubot-auth-middleware-ext/-/hubot-auth-middleware-ext-0.0.1.tgz"},"maintainers":[{"name":"jmcshane","email":"jmcshan1@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/hubot-auth-middleware-ext-0.0.1.tgz_1486754340010_0.5904489387758076"}}},"readme":"Hubot-auth-middleware adds listener middleware for restricting command access. Rooms, roles (hubot-auth), and environments are supported as command restriction concepts.\n\nThe core implementation uses listener options attributes that are processed in the auth-middleware's listenerMiddlware. You can create access-controled commands using formats like:\n\n````\n  listenerOptions = {\"id\":\"makeSandwich\",\"auth\":\"true\",\"roles\":\"sudoers\"}\n\n  robot.hear /make me a sandwich/, listenerOptions, (msg) ->\n    msg.send \"you are a sandwich\"\n````\n\nIf the request comes from a user who does not have the `sudoers` role, an error notification is logged and replied.\n\nThe various access control types can be combined as necessary. The `roles` and `rooms` values can be strings or arrays, so these all work:\n````\n  listenerOptionsX = {\"id\":\"secretStuff\",\"auth\":\"true\",\"roles\":[\"sudoers\",\"admin\",\"wheel\"],\"rooms\":\"#situation\"}\n  ...\n  listenerOptionsY = {\"id\":\"reallySecretStuff\",\"auth\":\"true\",\"roles\":\"chiefs\",\"rooms\":[\"#panic\",\"#emergency\"]}\n  ...\n  listenerOptionsZ = {\"id\":\"justForClarity\",\"auth\":\"true\",\"roles\":[\"admin\"],\"rooms\":\"#panic\"}\n````\n\n## Installation\n\nAdd the hubot-auth-middleware package to hubot/package.json dependencies and hubot/external-scripts.json. hubot-auth-middleware requires the hubot-auth script to function properly.\n\n\n## Configuration\n\nHubot-auth-middleware supports environment variables:\n\n  - HUBOT_AUTH_MIDDLEWARE_ENVIRONMENT - sets an environment that hubot-auth-middleware uses to confirm env-specific controls, defaults to 'production'\n  - HUBOT_AUTH_MIDDLEWARE_IGNORE_NO_AUTH - if true the given hubot instance will ignore any listeners where the listener.option.auth attribute is not \"true\"\n  - HUBOT_AUTH_MIDDLEWARE_ENVIRONMENT_REPLY - if true the instance will send a response message for environment rejections\n\n\n## Quick Start\n\nYou will need a recent Hubot version (supporting middleware). If middleware support is available, adding access controls is as easy as passing explicit listener.options in your listeners:\n\n````\n...\n+    listenerOptions = {\"id\":\"someCommand\",\"auth\":\"true\",\"roles\":\"admins\"}\n-    robot.hear /some command/, (msg) ->\n+    robot.hear /some command/, listenerOptions, (msg) ->  \n       # does some stuff\n...\n````\n\n### Environments\n\nIn some organizations multiple chatbots serving multiple environments (data centers, vpc, etc.) is convenient. Rather than having entirely custom chatbots for every environment, auth-middleware lets you declare that a particular chatbot should ignore any requests without auth-middleware configuration (HUBOT_AUTH_MIDDLEWARE_IGNORE_NO_AUTH=true environment variable). With this configuration, you can have a 'production' hubot and a 'stage1' hubot both running and listening in the same room, but only respond to a particular request from one bot.\n\n````\n  listenerOptions = {\"id\":\"restartDatabase\",\"auth\":\"true\",\"env\":\"stage1\"}\n\n  # Never in prod!!!\n  robot.hear /restart (db|database)/, listenerOptions, (msg) ->\n    # Errors if env is non-stage1\n    #\n    # db restart logic...\n    msg.send \"database restarted\"\n````\n\n### Roles\n\nCustom roles support basic access control groups. If deploy, infrastructure, or other commands must be limited to particular users, assign all those users a role and declare that role as required for a given command listener.\n\n````\n  listenerOptions = {\"id\":\"deleteUser\",\"auth\":\"true\",\"roles\":\"mgmt\"}\n  \n  robot.hear /userDelete ([\\w]+)/, listenerOptions, (msg) ->\n    # Errors if request.user is not in role mgmt\n    #\n    # userDelete logic...\n    msg.send \"Deleted user msg.match[1]\"\n````\n\n### Rooms\n\nRoom quarantines are helpful for lots of circumstances. Using auth-middleware room controls lets multiple bots listen wherever they want, but only respond to room-specific requests. For some bot-user/adapter configurations this is much easier than per-room quarantining at the adapter/user level.\n\n````\n  listenerOptions = {\"id\":\"youtubeSearches\",\"auth\":\"true\",\"rooms\":\"videosRoom\"}\n\n  robot.hear /youtube me (.*)/, listenerOptions, (msg) ->\n    # Errors if the request is anywhere other than the 'videosRoom'\n    #\n    # Youtube video search...\n    msg.send videolink\n````\n\n### Audits and Logging\n\nhubot-auth-middleware writes event details to INFO logs for audit needs. Messages include the following:\n - 'auth-middleware' tag\n - action (accepting|rejecting)\n - action reason (valid auth, wrong room, wrong environment, etc.)\n - request command\n - user and user id making the request\n - room where the request was made\n - environment of the given Hubot instance\n\n#### Example log:\n\nThese are the log outputs from the test suite. Note that I removed the timestamps for human-readability and to focus on the actual log message. Also, by default these are not displayed during testing (HUBOT_LOG_LEVEL='warning').\n\n````\nINFO auth-middleware: Accepting (without auth checks) 'amTest no options' request from user: adminUser (1), room: #test, env: x\nINFO auth-middleware: Accepting (without auth checks) 'amTest strange options' request from user: adminUser (1), room: #test, env: x\nINFO auth-middleware: Rejecting (env) 'amTest reject environment' request from user: adminUser (1), room: #test, env: x\nINFO auth-middleware: Rejecting (room) 'amTest reject room' request from user: adminUser (1), room: #test, env: x\nINFO auth-middleware: Rejecting (role) 'amTest reject role' request from user: adminUser (1), room: #test, env: x\nINFO auth-middleware: Accepting (valid auth) 'amTest allow environment' request from user: adminUser (1), room: #test, env: x\nINFO auth-middleware: Accepting (valid auth) 'amTest allow room' request from user: otherUser (2), room: #x, env: x\nINFO auth-middleware: Accepting (valid auth) 'amTest allow role' request from user: adminUser (1), room: #test, env: x\n````\n\n## Testing\n\nTest utilities are listed as devDependencies, and [nvm](https://github.com/creationix/nvm) is in place for nodejs version management. If you want to run tests or make updates, use:\n\n````\nnvm use\nnpm install\nnpm test\n````\n\n","maintainers":[{"name":"jmcshane","email":"jmcshan1@gmail.com"}],"time":{"modified":"2017-02-10T19:19:01.962Z","created":"2017-02-10T19:19:01.962Z","0.0.1":"2017-02-10T19:19:01.962Z"},"homepage":"https://github.com/jmcshane/hubot-auth-middleware#readme","keywords":["hubot","hubot-scripts","middleware","authentication","roles","rooms","environments"],"repository":{"type":"git","url":"git://github.com/jmcshane/hubot-auth-middleware.git"},"contributors":[],"bugs":{"url":"https://github.com/jmcshane/hubot-auth-middleware/issues"},"license":"MIT","readmeFilename":"README.md"}
