{"_id":"botsito","_rev":"2-8ac291c0dfe29d24beb9dc2897058705","name":"botsito","description":"Mentor bot","dist-tags":{"latest":"0.0.1"},"versions":{"0.0.0":{"name":"botsito","version":"0.0.0","author":{"name":"Yamil Asusta","email":"hello@yamilasusta.com"},"description":"Mentor bot","scripts":{"start":"bin/hubot","dev":"bin/hubot.test","deploy":"now --npm -e LOG_KEY=@log_key -e HUBOT_LOG_LEVEL=debug -e NODE_ENV=production -e HUBOT_SLACK_TOKEN=@bot-slack-token -e REDIS_URL=@redis-uri"},"dependencies":{"cheerio":"^0.22.0","cron":"^1.2.1","hubot":"^2.19.0","hubot-diagnostics":"0.0.1","hubot-help":"^0.2.0","hubot-http-status":"^0.2.2","hubot-phrases":"^1.3.3","hubot-plusplus":"^1.4.0","hubot-redis-brain":"^0.0.3","hubot-scripts":"^2.17.2","hubot-shipit":"^0.2.0","hubot-slack":"^4.3.1","ms":"^0.7.2","nightmare":"^2.9.1","now-logs":"^0.0.7","request":"^2.79.0"},"gitHead":"99991fc34b8743f43bd47d2340f614920f58b376","_id":"botsito@0.0.0","_shasum":"59c524bfd1e32b449ca433584609d680d75e5093","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.2","_npmUser":{"name":"elbuo8","email":"yamil.asusta@upr.edu"},"dist":{"shasum":"59c524bfd1e32b449ca433584609d680d75e5093","tarball":"https://registry.npmjs.org/botsito/-/botsito-0.0.0.tgz"},"maintainers":[{"name":"elbuo8","email":"yamil.asusta@upr.edu"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/botsito-0.0.0.tgz_1489450242384_0.37323715537786484"}},"0.0.1":{"name":"botsito","version":"0.0.1","author":{"name":"Yamil Asusta","email":"hello@yamilasusta.com"},"description":"Mentor bot","scripts":{"start":"bin/hubot","dev":"bin/hubot.test","deploy":"now --npm -e LOG_KEY=@log_key -e HUBOT_LOG_LEVEL=debug -e NODE_ENV=production -e HUBOT_SLACK_TOKEN=@bot-slack-token -e REDIS_URL=@redis-uri"},"dependencies":{"cheerio":"^0.22.0","cron":"^1.2.1","hubot":"^2.19.0","hubot-diagnostics":"0.0.1","hubot-help":"^0.2.0","hubot-http-status":"^0.2.2","hubot-phrases":"^1.3.3","hubot-plusplus":"^1.4.0","hubot-redis-brain":"^0.0.3","hubot-scripts":"^2.17.2","hubot-shipit":"^0.2.0","hubot-slack":"^4.3.1","ms":"^0.7.2","nightmare":"^2.9.1","now-logs":"^0.0.7","request":"^2.79.0"},"gitHead":"d614dbce7c8477c2c6b29197d02b6a2f69a1dbf4","_id":"botsito@0.0.1","_shasum":"1dd2b0f497180d57975c1f7dc380a3cfffeeb27b","_from":".","_npmVersion":"4.1.2","_nodeVersion":"7.7.2","_npmUser":{"name":"elbuo8","email":"yamil.asusta@upr.edu"},"dist":{"shasum":"1dd2b0f497180d57975c1f7dc380a3cfffeeb27b","tarball":"https://registry.npmjs.org/botsito/-/botsito-0.0.1.tgz"},"maintainers":[{"name":"elbuo8","email":"yamil.asusta@upr.edu"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/botsito-0.0.1.tgz_1489520357304_0.42401335621252656"}}},"readme":"# Botsito extension\n\nExtending `botsito` is pretty straight forward. Within the `scripts/students` directory, create a new file. In the file, declare a _named function_. Let's use `a` for the purposes of example.\n\n```js\nfunction a() {\n\n}\n```\n\nIn order to interact with `botsito`, our function will receive it as a parameter.\n\n```js\nfunction a(botsito) {\n\n}\n```\n\nHaving `botsito` within our _function scope_ allows us to interact with it. The following methods are available:\n\n### `botsito.logger.info`\nLogs to the console. Helpful for debugging.\n\nTakes in a single parameter.\nThe value of what is gonna be logged.\n\nReturns `undefined`.\n\n```js\nfunction a(botsito) {\n  botsito.logger.info('function \"a\" is being loaded');\n}\n```\n### `botsito.logger.error`\nLogs to the console. It's used when we want to inform ourselves that something went wrong.\n\nTakes in a single parameter.\nThe value of what is gonna be logged.\n\nReturns `undefined`.\n\n```js\nfunction a(botsito) {\n  botsito.logger.error(new Error('omg something went wrong'));\n}\n```\n\n### `botsito.brain.get`\nLooks for a previously stored value in `botsito`.\n\nIt takes a single parameter.\nThe `key` used to fetch the value;\n\nReturns the value previously stored.\n\n```js\nfunction a(botsito) {\n  var b = botsito.brain.get('my key');\n  if (!b) {\n    return botsito.logger.error(new Error('b is undefined!'));\n  }\n}\n```\n\n### `botsito.brain.set`\nStores a value within `botsito`.\n\nTakes two parameters.\nFirst parameter is the `key` for which you will look for it later via `botsito.brain.get`.\nThe second parameter is the value you wish `botsito` to store.\n\n```js\nfunction a(botsito) {\n  botsito.brain.set('my key', 'my valueeee');\n  var b = botsito.brain.get('my key');\n  if (!b) {\n    return botsito.logger.error(new Error('b is undefined!'));\n  }\n\n  botsito.logger.info(b);\n}\n```\n\n# `botsito.listen`\nInterface in which `botsito` receives messages and acts upon them.\n\nTakes two parameters. Both are functions.\n\nFirst parameter function receives a single parameter called `msg`. It holds properties like `text` (the message posted) and `user` (the poster of the message). In this function you will determine if you will act upon the `msg` received. This function must return `true` or `false`.\n\nSecond parameter function receives a single parameter called `response`. It holds the method `reply` which allows us to write to the channel. This is where you will put the bulk of your logic will live. This function will only be called if the first parameter function returned `true`.\n\n```js\nfunction a(botsito) {\n\n  function validator(msg) {\n    var willReply = false;\n    if (msg.text.indexOf('pi time') !== -1) {\n      willReply = true;\n    }\n    return willReply;\n  }\n\n  function postBack(response) {\n    return response.reply('PI TIMEEEEE');\n  }\n\n  botsito.listen(validator, postBack);\n}\n```\n\nThis function will listen for messages that include the phrase `pi time` and will reply with `PI TIMEEEEE` to the channel.\n\nThe `response` object also contains additional information inside the `envelope` property. Try logging this property out to see what you learn.\n\n## Exposing the function\n\nOnce you are satisfied with your function, we need to make it readable. To do so, add the following line at the end of your file:\n\n```js\nmodule.exports = a;\n```\n\nThat's it! Now your function is ready to join `botsito`.\n","maintainers":[{"name":"elbuo8","email":"yamil.asusta@upr.edu"}],"time":{"modified":"2017-03-14T19:39:19.216Z","created":"2017-03-14T00:10:44.458Z","0.0.0":"2017-03-14T00:10:44.458Z","0.0.1":"2017-03-14T19:39:19.216Z"},"author":{"name":"Yamil Asusta","email":"hello@yamilasusta.com"},"readmeFilename":"README.md"}
