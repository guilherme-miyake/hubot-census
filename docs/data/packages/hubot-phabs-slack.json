{"_id":"hubot-phabs-slack","_rev":"1-5f9a038d3682bdc189d274fccd40d4ff","name":"hubot-phabs-slack","dist-tags":{"latest":"2.5.0"},"versions":{"2.5.0":{"name":"hubot-phabs-slack","description":"A hubot plugin for communication with a Phabricator instance from slack.","version":"2.5.0","author":{"name":"mose","email":"mose@mose.com","url":"http://mose.com"},"license":"MIT","keywords":["hubot","hubot-scripts","phabricator"],"repository":{"type":"git","url":"git+ssh://git@gitlab.com/ozmose/hubot-phabs-slack.git"},"bugs":{"url":"https://gitlab.com/ozmose/hubot-phabs-slack/issues"},"dependencies":{"bluebird":"^3.4.6","moment":">= 2.14.1"},"peerDependencies":{"hubot":"3.1.1","coffeescript":"~1.6"},"devDependencies":{"chai":"~3.5.0","coffee-coverage":"~3.0.0","coffeelint":"~2.1.0","coffeescript":"^2.3.1","coveralls":"~3.0.2","es6-promise":"~3.2.1","hubot":"3.1.1","hubot-auth":"^2.0.0","hubot-test-helper":"~1.9.0","istanbul":"~0.4.4","mocha":"~5.2.0","nock":"~8.0.0","sinon":"~1.4.2","sinon-chai":"~2.8.0","sloc":"^0.2.0"},"scripts":{"test":"make test","posttest":"coffeelint lib/* scripts/* test/* index.coffee"},"main":"index.js","gitHead":"9247051fcf3fdf15a10ce6408d5b03050837f091","homepage":"https://gitlab.com/ozmose/hubot-phabs-slack#README","_id":"hubot-phabs-slack@2.5.0","_npmVersion":"6.0.0","_nodeVersion":"8.9.4","_npmUser":{"name":"mose","email":"mose@mose.com"},"dist":{"integrity":"sha512-wmxQYm5Eu8EpTh4Ba86b1z11k5Pof5IUznBYVNiXIOdM9wYGzsK2b2g0hyJUZ9SaWpRw9TJQ/758cFo67nSVVQ==","shasum":"4970f9d39f89c234581271116fe33da1f6d22c07","tarball":"https://registry.npmjs.org/hubot-phabs-slack/-/hubot-phabs-slack-2.5.0.tgz","fileCount":13,"unpackedSize":110316,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbd1olCRA9TVsSAnZWagAAmrIP/2A+DPN0mt/3a5wIiK1f\nsWXSV9EUp3C9iQDzZJAiqylCUygxo1TMaRwWb4K4ToOP77q2uYatuyBS2qYR\nga0mvCnEafJ35owodFrrpfC6kG5lO2cWOQVQDXtho75WLUeC4NdR87Xot8Ik\ngiSK+5wreEyUZODf9nTiqny+YiooUW4nvngvaoGjU3pjrDhWCM/TgVcJQkvN\nxAaxGn4Gyw9fRwkYtjXwstjX/ciA+IzqGwaPOpuTgD2lejcMYnqme0w9IO95\nrjU6n2xsBBdiqHJ5L+wq0KzxbXSsL/fIP/7MDWsJUP51q6a+sVSsCH6AfsxT\ndqmxBLvJAVXHJn+trDjrHO2N9ddhQ+WcXfcGZWuEd0kTl9VbcWB1cOU+Jrwd\nWqi/vJrzpIG6j58QiLVRw0ldmu+wo+mwEpxJTrAUszKv9h6Bva6At80Ri7hd\naWtyKnOS7qmbLGBeSik6+x/rDir+ccB8u4X7zSU8eE6ndwr2lWHAwXJmuptl\n6eU1HhyNfNGt9oj7Y3/Ombkp5a07rGBaLj7Kjh4nW7ZbGRczN9xun7ojPmmW\nnoErhu2izeFBBSur+lFA1RqZ9nc+B9YMoeKb6NtZK6K2di/L79xUB3Tbn0GL\n8rMhEl+WCjCc4gsg08EdXsZQGXkAcqLQZDVOwM/7KnhVdEGBn36k8GjpPJuF\neUnq\r\n=eCT4\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"mose","email":"mose@mose.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hubot-phabs-slack_2.5.0_1534548516584_0.5940228807058776"}}},"time":{"created":"2018-08-17T23:28:36.583Z","2.5.0":"2018-08-17T23:28:36.679Z","modified":"2018-08-17T23:28:39.583Z"},"maintainers":[{"name":"mose","email":"mose@mose.com"}],"description":"A hubot plugin for communication with a Phabricator instance from slack.","homepage":"https://gitlab.com/ozmose/hubot-phabs-slack#README","keywords":["hubot","hubot-scripts","phabricator"],"repository":{"type":"git","url":"git+ssh://git@gitlab.com/ozmose/hubot-phabs-slack.git"},"author":{"name":"mose","email":"mose@mose.com","url":"http://mose.com"},"bugs":{"url":"https://gitlab.com/ozmose/hubot-phabs-slack/issues"},"license":"MIT","readme":"Hubot Phabricator Plugin for Slack\n==================================\n\n[![Version](https://img.shields.io/npm/v/hubot-phabs.svg)](https://www.npmjs.com/package/hubot-phabs)\n[![Downloads](https://img.shields.io/npm/dt/hubot-phabs.svg)](https://www.npmjs.com/package/hubot-phabs)\n[![Build Status](https://img.shields.io/travis/Gandi/hubot-phabs.svg)](https://travis-ci.org/Gandi/hubot-phabs)\n[![Dependency Status](https://gemnasium.com/Gandi/hubot-phabs.svg)](https://gemnasium.com/Gandi/hubot-phabs)\n[![NPM](https://nodei.co/npm/hubot-phabs.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/hubot-phabs/)\n\nThis plugin is designed to work as an addon for [Hubot](https://hubot.github.com/). Its role is to make interactions possible between a chat room (irc, slack, gitter) and a [phabricator](https://www.phacility.com/phabricator/) instance.\n\nWhen installed this plugin will check the channels where the bot lurks, to see if someone is talking about Phabricator objects (T32 or P156 or F1526) to complement the conversation with the name of the referred item.\n\nIt also makes available some commands to interact directly with Phabricator items, like create a task, assign a task to a user. This is a work in progress and more commands will be added with time.\n\nThis plugin is used in production internally at [Gandi](https://gandi.net) since 2016-07-13, on irc.\n\nIn august 2018, I decided to fork it to make it nicer for slack, as there are various formating options there that could be useful. Original code is unmaintained since I left Gandi in june 2017, anyways (well it works fine and it's pretty advanced already, and it does the job).\n\nCheck the [Changelog](CHANGELOG.md) for a precise history of the versions.\n\n> TOC\n> --------------\n>\n> - [Installation](#installation)\n> - [Permission System](#permission-system)\n> - [Configuration](#configuration)\n> - [Features](#features)\n>   - [events](#events-feature)\n>   - [api](#api-feature)\n>   - [commands](#commands-feature)\n>   - [templates](#templates-feature)\n>   - [admin](#admin-feature)\n>   - [feeds](#feeds-feature)\n>   - [hear](#hear-feature)\n> - [Development](#development)\n>   - [Changelog](#changelog)\n>   - [Testing](#testing)\n>   - [Contribute](#contribute)\n> - [Attribution](#attribution)\n>   - [Authors](#authors)\n>   - [License](#license)\n>   - [Copyright](#copyright)\n\nInstallation\n--------------\nIn your hubot directory:    \n\n    npm install hubot-phabs --save\n\nThen add `hubot-phabs` to `external-scripts.json`\n\nNext you need to create a `bot` user in Phabricator and grab its api key.\n\n\nPermission system\n-------------------\n\nBy default every action is usable by any user. But you can follow the optional permission system by using the `hubot-auth` module.\n\nThere are mainly 3 permissions groups:\n\n- `admin` group, for which everything is permitted everywhere\n- `phadmin` group, required for which everything is permitted on `.phab` and `.phad` commands\n- `phuser` group, which cannot use \n    - the `.phad` command except `.phad projects`\n    - the `.phab user = email` command\n- the 'not in any group' user, which cannot\n    - create new task\n    - create new paste\n    - change status or permission\n    - assign a task to someone\n    - set an email or check other users\n\nIf you set the variable `PHABRICATOR_TRUSTED_USERS` to `y`, then the 'not in any group' users can access all the features reserved for the `phuser` group. Typically the `phuser` role is designed to be used on public irc or gitter channels, but is not needed in closed slack channels.\n\nConfiguration\n-----------------\n\n- `PHABRICATOR_URL` - main url of your Phabricator instance\n- `PHABRICATOR_VERSION` - the version of phabricatior used, in the shape `2017.24` so it's `year.week` and looks like a float easy to compare. This is used for handling breaking changes between versions of phabricator.\n- `PHABRICATOR_API_KEY` - api key for the bot user\n- `PHABRICATOR_LAST_TASK_LIFETIME` - how long the last task is remembered for each user (default 60 min). If set to \"0\" there is memory on the last task remembered. If set to \"-\" the memory is never expired.\n\nIf you use `hubot-auth`\n- `HUBOT_AUTH_ADMIN` - hardcoded list of hubot admins\n- `PHABRICATOR_TRUSTED_USERS` - if set to 'y', bypasses the requirement of belonging to `phuser` group for  commands restricted to users. Makes sense in places where all users are internal or invited-only and trustworthy.\n\nYou also should use `hubot-restrict-ip` to limit the access to the web endpoints (api and feeds endpoints), or serve only on localhost (`EXPRESS_BIND_ADDRESS=127.0.0.1`) and use a proxy to access those endpoints.\n\n- `PHABRICATOR_ENABLED_ITEMS` - is used with feature `hear` to limit what kind of objects are commonly used in your instance of Phabricator\n- `PHABRICATOR_FEED_EVERYTHING` - if set to a value that is not '0' (like 1 or yes), then the feedall feature will not only announce tasks. Note that this option only applies to the `.ph feedall to <room>` case, not to specific projects feeds.\n\n\nFeatures\n----------------\n\nThe `hubot-phabs` plugin has a lot of features, and some of them could be useless, or dangerous if activated under an unprotected environment. There are 2 environment variables that can be used to limit what features are loaded and active:\n\n- `PHABS_ENABLED_FEATURES` can be a comma-separated list of the only plugins enabled. \n- `PHABS_DISABLED_FEATURES` is also a comma-separated list of features, to only restrict a few ones. It won't be any use if the `PHABS_ENABLED_FEATURES` is declared, as it would take priority.\n\nTypical examples of usage are:\n\n- `PHABS_ENABLED_FEATURES=\"hear\"` if you only want the bot to do automatic announces\n- `PHABS_DISABLED_FEATURES=\"feeds,api\"` if you don't want to expose http endpoints\n- `PHABS_DISABLED_FEATURES=\"admin,feeds\"` if you don't use `hubot-auth`. Note that you can do the setup with the admin feature at first, and then just disable it (and relaunch the bot in between).\n\nAvailable features are loaded in that order:\n\n- `events`\n- `api`\n- `commands`\n- `templates`\n- `admin`\n- `feeds`\n- `hear`\n\n\n### Events feature\n\nThere is some events available for interaction with other plugins, to chain actions or automate them. The specific use case we had was to use [hubot-cron-events](https://github.com/Gandi/hubot-cron-events) to create templated tasks are given times. It is making sense in our workflow. The principle is pretty useful, so there will be more events declared further on.\n\n    phab.createTask\n        payload:\n        - project (by name or alias)\n        - template (null if none)\n        - title\n        - description\n        - user (an object with at least a name property)\n        - assign (as a user name)\n        - announce (optional: the name of a room where to announce the task creation and id)\n        It will create a task from an event, \n        and talk on the logger when done or if it fails.\n\n### API feature\n\nIt may seem a little weird, but circumstances led us to use our hubot as an API endpoint for creating tasks from inside our internal network. Of course we could just use conduit and hit Phabricator directly but:\n\n- we save the hassle of spreading the API key around\n- we are inside a trusted network, and use hubot-restrict-ip\n- we expose REST endpoints, with only very simplified payload description\n\nTo avoid exposure of that weak API endpoint, you should:\n\n- set the env var PHABS_NO_API to any value, if it's defined, the api code is not loaded\n- use [hubot-restrict-ip](https://github.com/Gandi/hubot-restrict-ip) to set up your own policy\n- set your hubot to respond http calls through a well configured apache or nginx proxy\n\nCurrently the API only has one endpoint, that triggers the `phab.createTask` event\n\n    POST /<robot.name>/phabs/api/:project/task\n    where :project can be a project name or an alias \n    that you have set with .phad\n    the content-type has to be application/json\n    and the payload should conform to the payload \n    for the phab.createTask event\n\n### Commands feature\n\nCommands prefixed by `.phab` are here taking in account we use the `.` as hubot prefix, just replace it with your prefix if it is different. Also, `phab` can be shortened to `ph` in the commands.\n\nRequests can be done on arbitrary projects. Their PHID will be retrieved at first call and cached in hubot brain. Those projects can use aliases, like short names, interchangeably, for convenience (set them up using the `.phad` command).\n\n    .phab [all] [limit] <project> <search terms>\n        will grab the 3 newest matches in tasks matching search terms and included in project.\n        note that there are some special rules:\n        - non-alphanumeric chars will be mess up\n        - the match is done on full-words: test won't match tests\n        - if the 'all' prefix is used, it will also search in task that are not in status 'open'\n        - if the limit is specified, it has to be a number. without limit the default is 3\n          remember that phabricator search api has a hard limit of 100 in any case\n          (so '.phab 1000 <project> <term>' will only return 100 results anyways)\n        permission: all\n\n    .phab [all] [limit] search <search terms>\n        will grab the 3 newest matches in tasks matching search terms.\n        Same rules apply as the search per project/tag.\n        permission: all\n\n    .phab new <project> <task title>\n    .phab new <project> <task title> = <description>\n        creates a new task in an arbitrary project. \n        A project alias can also be used.\n        The new task will be created in the default column of the project board.\n        The issuer of the command will be added in the list of subscribers\n        for the newly created task.\n        The <description> is optional, and will be used as description if provided\n        NOTE: this call will record this Task id associated to you for 1 hour\n        permission: phuser\n\n    .phab new <project>:<template> <task title>\n    .phab new <project>:<template> <task title> = <description>\n        creates a new task using a template.\n        if a description is provided, it will prepend the template description\n        For the rest, it behaves like the .phab new command\n        permission: phuser\n\n    .phab paste <new paste title>\n        creates a new paste and provide the link to edit it\n        permission: phuser\n\n    .phab T123\n    .phab\n        gives the status, priority and owner of the task xxx\n        NOTE: this call will record this Task id associated to you for 1 hour\n        permission: all\n\n    .phab T123 + <some comment>\n    .phab + <some comment>\n        adds a comment to task Txxx (or the one in short memory).\n        permission: phuser\n\n    .phab T123 in tag1\n    .phab T123 not in tag1\n    .phab T123 in tag1 in tag2 not in tag3 in tag4\n        adds or remove tags from tasks. Tags are also known as projects\n        permission: phuser\n\n    .phab T123 is open\n    .phab T123 is broken\n    .phab is low\n    .phab low\n    .phab is low = this is a reason\n    .phab is low + this is a reason\n        Changes status or priority for task Txxx. the 'is' is optional.\n        If the optional '=' or '+' is used, it will add a comment to that change\n        Available statuses are:\n        - open, opened                     -> open\n        - resolved, resolve, closed, close -> resolved\n        - wontfix, noway                   -> wontfix\n        - invalid, rejected                -> invalid\n        - spite, lame                      -> spite\n        Available priorities are\n        - broken, unbreak         -> Unbreak Now!\n        - none, unknown, triage   -> Needs Triage\n        - high, urgent            -> High\n        - normal                  -> Normal\n        - low                     -> Low\n        - wish, wishlist          -> Whishlist\n        NOTE: this call will record this Task id associated to you for 1 hour\n        permission: phuser\n\n    .phab T123 on <someone>\n    .phab for <someone>\n        assigns the given task to a user (or the given user to the task, \n        which is exactly the same). \n        The 'for' and 'on' conjunctions are inter-changeable.\n        You can use 'me' as username and it will substitute your username\n        NOTE: this call will record this Task id associated to you for 1 hour\n        permission: phuser\n\n    .phab T123 to <column>\n    .phab to <column>\n    .phab T123 to <column> + some comment\n    .phab T123 to <column> = some comment\n        moves the task on the board to the column matching the <column>\n        the matching will take the first match.\n        A comment can optionaly be added\n        permission: phuser\n\n    .phab T123 sub <user>\n    .phab sub <user>\n    .phab T123 sub <user> + some comment\n    .phab T123 unsub <user> = some comment\n        subscribes and unsubscribes users to tasks.\n        A comment can optionally be added.\n        You can use 'me' as username and it will substitute your username\n        permission: phuser\n\n    .phab T123 on <someone> is low is open to <column>\n        starting with `v2.2.0` it's possible to combine several commands to \n        change a task. It detects actions to be taken according to the conjunction used:\n        - on      - change owner\n        - for     - change owner (alias to on)\n        - is      - change status or priority\n        - in      - change tag/project (add a tag)\n        - not in  - change tag/project (remove a tag)\n        - to      - change column\n        - sub     - subscribes user\n        - unsub   - unsubscribes user\n        permission: phuser\n\n    .phab T123 next <term>\n    .phab T123 next\n    .phab next\n        This will return the first match in the Task T123 description \n        that begins with a [ ] (a checkbox)\n        if a <term> is provided, it will match the first line \n        that begins with '[ ] term'\n        the first word on the line, just after the checkbox, is used\n        as a keyword, but it's totally optional\n        permission: phuser\n\n    .phab T123 prev <term>\n    .phab T123 prev\n    .phab previous\n    .phab prev\n        This will return the last match in the Task T123 description \n        that begins with a [x] (a checked checkbox)\n        if a <term> is provided, it will match the last line \n        that begins with '[x] term'\n        permission: phuser\n\n    .phab T123 check <term>\n    .phab T123 check\n    .phab check\n    .phab check! <term>\n    .phab check!\n    .phab check! + <comment>\n        This will update the description of T123\n        and replace the checkbox line with a checked box '[x]'\n        If a term is provided, the first matching line will be the checked one\n        If the '!' is added, it will also return the next unchecked checkbox\n        If a '+' is added at the end of any above syntax, it will append a comment \n        in the modification\n        permission: phuser\n\n    .phab T123 uncheck <term>\n    .phab T123 uncheck\n    .phab uncheck\n    .phab uncheck! <term>\n    .phab uncheck!\n    .phab uncheck! + <comment>\n        This will update the description of T123\n        and replace the checked checkbox line with a checked box '[ ]'\n        If a term is provided, the last matching line will be the unchecked one\n        If the '!' is added, it will also return the previous checked checkbox\n        If a '+' is added at the end of any above syntax, it will append a comment \n        in the modification\n        permission: phuser\n\n    .phab user <someone>\n        will check is <someone> is linked to his Phabricator account \n        (using email address)\n        permission: phuser\n\n    .phab me as <email@example.com>\n        registers your email in the bot. You need to specify the email address \n        registered in Phabricator\n        permission: phuser\n\n    .phab user <someone> = <email@example.com>\n        registers email for another user, follows the same concept as \n        .phab me as ..\n        permission: phadmin\n\n    .phab count <project>\n        return the number of tasks in the given <project>\n        permission: all\n\n    .phab version\n        displays the version of hubot-phabs that is installed\n        permission: all\n\n    .phid <phid>\n    .phid <name>\n        When provided a PHID-*, gives the name and uri for a given PHID (mostly for arcanist use)\n        When provided an item name (ie. T123), returns the PHID\n        permission: all\n\n\n### Templates feature\n\nThere is also a way to specify a list of templates for creating new Tasks with prefilled descriptions. Any task can be used as a template, whatever the status, as far as they are readable by the bot user. Typically those can be relevant closed Tasks form the past that we fit for templating.\n\nThe management of those templates is done with the `.pht` command:\n\n    .pht new <name> T123\n        creates a new template named <name>, using the task T123 as a template\n        permission: phadmin\n\n    .pht show <name>\n    .pht info <name>\n        shows what task is used as a template\n        permission: phuser\n\n    .pht search <term>\n    .pht list <term>\n        search through templates which names contain <term>\n        If <term> is omitted, it just retruns the whole list \n        of all templates\n        permission: phuser\n\n    .pht remove <name>\n        removes template named <name> from the brain memory\n        permission: phadmin\n\n    .pht update <name> T321\n        updated template named <name> with the new template task T321\n        permission: phadmin\n\n    .pht rename <name> <newname>\n        rename the template named <name> with <newname>\n        permission: phadmin\n\n\n### Admin features\n\nSome configuration variables are stored the brain. They are managed by the phabs_admin module, driven with the `.phad` command. **note** the syntax changed in v1.5.1\n\n    .phad projects\n        lists projects listed in brain\n        permission: all\n\n    .phad delete <project>\n    .phad del <project>\n        removes information about <projects> from the brain\n        (useful when a project is deleted or renamed in phabricator)\n        permission: phadmin\n\n    .phad info <project>\n    .phad show <project>\n        gives info about <project>, including aliases, feeds and columns\n        permission: all\n\n    .phad info <parent> / <project>\n    .phad show <parent> / <project>\n        gives info about <project> given that it is a subproject or milestone of <parent>, \n        retunred information includes aliases, feeds and columns\n        permission: all\n\n    .phad refresh <project>\n        refresh info for <project> form phabricator\n        typically useful when there are new columns in a workboard\n        permission: all\n\n    .phad alias <project> as <alias>\n        adds an alias <alias> to <project>. Aliases are unique \n        permission: phadmin\n\n    .phad forget <alias>\n        removes the alias <alias>\n        permission: phadmin\n\n    .phad feed <project> to <room>\n    .phad feeds <project> to <room>\n        creates a feed for <project> to <room>.\n        Feeds are comming from feed.http-hooks. Only tasks are included in this feed.\n        permission: phadmin\n\n    .phad remove <project> from <room>\n        remove a feed\n        permission: phadmin\n\n    .phad feedall to <room>\n        creates a catchall feed to <room>.\n        Only tasks are included in this feed \n        unless the var PHABRICATOR_FEED_EVERYTHING is set and is not set to '0'\n        permission: phadmin\n\n    .phad removeall from <room>\n        remove a catchall feed\n        permission: phadmin\n\n\n### Feeds feature\n\nA http endpoint is open for receiving feeds from `feed.http-hooks` as explained in https://secure.phabricator.com/T5462\n\nYou can use the `.phad` commands to associate Projects to rooms. Each Feed Story will then be dispatched on one or several rooms according to the project the task belongs to. This only works with Tasks (for now).\n\nNote that the tasks from a subprojects are also announced in the feed for the parent project.\n\nThe feed has an optional way to limit the IP of the sender, by setting the HUBOT_AUTHORIZED_IP_REGEXP env variable. If this variable is not set, there is not access control. It's a limited soft protection, if you really need a heavy secure protection, do something on your network for it.\n\nSince 2.4.1, users can also set private alerts on tasks they own or are subscribed to.\n\n    .phab me set alerts\n        will send a private message for each task the caller owns or is subscribed to\n        (note: it only works on tasks for now)\n        permission: phuser\n\n    .phab <user> set alerts\n        same as with 'me' but with arbitrary user name, to enable their subscription to alerts\n        permission: phadmin\n\n    .phab me unset alerts\n        will disable alerts\n        permission: phuser\n\n    .phab <user> unset alerts\n        same as with 'me' but with arbitrary user name, to disable their subscription to alerts\n        permission: phadmin\n\n\n### Hear feature\n\nThere is a `.hear` feature that also will give information about items that are cited on channel. It tries to do precise pattern matching but sometimes there are some unfortunate coincidences. For example, we work with level3 and talk about it under L3 often. Or one of our project involves a V5. It's kind of annoying to have the bot react on those specific case, so it' possible to blacklist them.\n\nThere is possibility to only react to certain item type too, by setting the `PHABRICATOR_ENABLED_ITEMS` environment variable. For example `PHABRICATOR_ENABLED_ITEMS=\"T,P,r\"` will restrict reactions to only Tasks, Pastes and Commits items. If that env var is not declared, it will react to all known types.\n\n    something about https://phabricator.example.com/T2#17207\n    just talking about T123. did you see that one?\n        the plugin will watch if it sees \n        - T[0-9]+ for tasks (of Maniphest)\n        - P[0-9]+ for pastes \n        - D[0-9]+ for differential revisions\n        - F[0-9]+ for files \n        - M[0-9]+ for mocks (of Pholio)\n        - B[0-9]+ for builds (of Harbormaster)\n        - L[0-9]+ for legalpads\n        - V[0-9]+ for polls (of Slowvote)\n        - r[A-Z]+[a-f0-9]+ for commit (of Diffusion)\n        if it is in an url, it will reply with \n          T2 - <title of the task>\n        if it's not in an url it will reply with\n          <task url> - <task title>\n        NOTE: this call will record this Task id associated to you for 5 minutes\n        it will just say nothing if the pattern matched is in the blacklist\n        permission: all\n\n    .phab bl T123\n        this will add T123 to the blacklist\n        permission: phuser\n\n    .phab unbl T123\n        this will remove T123 from the blacklist\n        permission: phuser\n\nDevelopment\n--------------\n\n### Changelog\n\nAll changes are listed in the [CHANGELOG](CHANGELOG.md)\n\n### Testing\n\n    npm install\n\n    # will run make test and coffeelint\n    npm test \n    \n    # or\n    make test\n    \n    # or, for watch-mode\n    make test-w\n\n    # or for more documentation-style output\n    make test-spec\n\n    # and to generate coverage\n    make test-cov\n\n    # and to run the lint\n    make lint\n\n    # run the lint and the coverage\n    make\n\n\n### Contribute\n\nFeel free to open a PR if you find any bug, typo, want to improve documentation, or think about a new feature. \n\nAttribution\n-----------\n\n### Author\n\n- [@mose](https://github.com/mose) - author\n\n### License\n\nThis source code is available under [MIT license](LICENSE).\n\n### Copyright\n\nCopyright (c) 2018 - mose\nCopyright (c) 2016 - Gandi - https://gandi.net\n","readmeFilename":"README.md","_attachments":{}}