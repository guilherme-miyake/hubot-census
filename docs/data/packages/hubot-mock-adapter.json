{"_id":"hubot-mock-adapter","_rev":"6-b03d9a1abbc0429d0045be89d56c12e9","name":"hubot-mock-adapter","description":"A mock Adapter for unit testing Hubot scripts","dist-tags":{"latest":"1.1.0"},"versions":{"1.0.0":{"name":"hubot-mock-adapter","version":"1.0.0","description":"A mock Adapter for unit testing Hubot scripts","keywords":["hubot","jasmine"],"author":{"name":"Brian Lalor","email":"blalor@bravo5.org"},"repository":{"type":"git","url":"git@github.com:blalor/hubot-mock-adapter.git"},"main":"index.js","dependencies":{"hubot":">=2.5.4","lodash":"1.3.1"},"license":"WTFPL","readme":"# mock adapter for unit-testing Hubot\n\nI've whacked together a couple of Hubot scripts, but then they started getting\nmore complicated.  TDD is really the ONLY way to do any kind of meaningful\ndevelopment.  But even if you're not TDD'ing, you *are* testing, right?\n_Right_?\n\nI couldn't find an existing method for writing unit tests for Hubot scripts.\nAfter digging around under Hubot's hood, I figured out all I really needed was\nan `Adapter` implementation I could spy on.  That is what you see here.\n\n## example usage\n\nLet's assume you've got a really simple script, like this:\n\n    module.exports = function(robot) {\n        robot.hear(/Computer!/, function(msg) {\n            msg.reply(\"Why hello there! (ticker tape, ticker tape)\");\n        });\n    };\n\nYou want to test this, of course.  So create a Jasmine spec file:\n    \n    var path = require(\"path\");\n    \n    describe(\"Eddie the shipboard computer\", function() {\n        var robot;\n        var user;\n        var adapter;\n        \n        beforeEach(function() {\n            var ready = false;\n            \n            runs(function() {\n                // create new robot, without http, using the mock adapter\n                robot = new Robot(null, \"mock-adapter\", false, \"Eddie\");\n                \n                robot.adapter.on(\"connected\", function() {\n                    // only load scripts we absolutely need, like auth.coffee\n                    process.env.HUBOT_AUTH_ADMIN = \"1\";\n                    robot.loadFile(\n                        path.resolve(\n                            path.join(\"node_modules/hubot/src/scripts\")\n                        ),\n                        \"auth.coffee\"\n                    );\n                    \n                    // load the module under test and configure it for the\n                    // robot.  This is in place of external-scripts\n                    require(\"../index\")(robot);\n                    \n                    // create a user\n                    user = robot.brain.userForId(\"1\", {\n                        name: \"jasmine\",\n                        room: \"#jasmine\"\n                    });\n                    \n                    adapter = robot.adapter;\n                });\n                \n                robot.run();\n            });\n            \n            waitsFor(function() {\n                return ready;\n            });\n        });\n        \n        afterEach(function() {\n            robot.shutdown();\n        });\n        \n        it(\"responds when greeted\", function(done) {\n            // here's where the magic happens!\n            adapter.on(\"reply\", function(envelope, strings) {\n                expect(strings[0]).toMatch(\"Why hello there\");\n                \n                done();\n            });\n            \n            adapter.receive(new TextMessage(user, \"Computer!\"));\n        });\n    });\n\nThat's (almost) all there is to it!\n\n## firing up Jasmine\n\nAssuming you're using [`jasmine-node`][jasmine-node] to run your tests, and your\ntests are in `specs/`, just run `node_modules/.bin/jasmine-node --coffee specs`.\nFor less typing, in your `package.json`, add a `test` script:\n\n    \"scripts\": {\n        \"test\": \"node_modules/.bin/jasmine-node --coffee --color spec/\"\n    }\n\nThen you can use `npm test` to run your tests!\n\n[jasmine-node]: https://github.com/mhevery/jasmine-node\n","readmeFilename":"README.md","_id":"hubot-mock-adapter@1.0.0","dist":{"shasum":"2540b3852faac70314443079946e950bd8ca6701","tarball":"http://registry.npmjs.org/hubot-mock-adapter/-/hubot-mock-adapter-1.0.0.tgz"},"_from":".","_npmVersion":"1.2.15","_npmUser":{"name":"blalor","email":"blalor@bravo5.org"},"maintainers":[{"name":"blalor","email":"blalor@bravo5.org"}],"directories":{}},"1.1.0":{"name":"hubot-mock-adapter","version":"1.1.0","description":"A mock Adapter for unit testing Hubot scripts","keywords":["hubot","jasmine"],"author":{"name":"Brian Lalor","email":"blalor@bravo5.org"},"repository":{"type":"git","url":"git+https://github.com/hubotio/hubot-mock-adapter.git"},"main":"index.js","dependencies":{"hubot":">=2.5.4","lodash":"1.3.1"},"license":"WTFPL","devDependencies":{"semantic-release":"^15.9.6"},"scripts":{"semantic-release":"semantic-release","test":"node -c index.js"},"gitHead":"e6f08537931fd4066dbbf6a8e4962e75872052c9","bugs":{"url":"https://github.com/hubotio/hubot-mock-adapter/issues"},"homepage":"https://github.com/hubotio/hubot-mock-adapter#readme","_id":"hubot-mock-adapter@1.1.0","_npmVersion":"6.3.0","_nodeVersion":"10.8.0","_npmUser":{"name":"hubotbot","email":"technicalpickles+hubotbot@github.com"},"dist":{"integrity":"sha512-v2PjnWPU9EWn9qLAsKXyYTRwKZagGcXe8sEHwaxmQsEAat0jONnnyY6vXcs1N8YP1OO1M+U1dlt4G8eGCLK5ew==","shasum":"87ed0dfd54d7133b6f52ad772e057e66199776e2","tarball":"https://registry.npmjs.org/hubot-mock-adapter/-/hubot-mock-adapter-1.1.0.tgz","fileCount":5,"unpackedSize":4965,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJba5aFCRA9TVsSAnZWagAALmIP/i2W4Edeg1mTlrVIJl1Y\n3ZrVv5U9GTUmtShAtX/WufG58a2ON842tK6WQ4+9oQg5uv3QedD0LGf6k4C3\nEk2JX4f05EkpX16+Vl5TlMAD55oUGSNo6nB6uSQLtRoz7DH4j3ovRnKoLVFE\nwok3H/HWi6RsrdoySOfoaaJqrmDv2M+mO3Bv2qryKuA40oqt0DPPK/S9P0+A\nwV2ojBymOkxA8TbzA6vJsJiACtV2ss4p193Au6pO+1l6mmhGy0od20NNTkw7\ndsxjrxaSfdbutu94UNkh5MwazHgcrGD4vQoxLvXZWFknGsJKs9JpC1NihH0M\nlOGu9BBBYAKMO9ydn9WFKgLbiscJd0LR5Ku+zBlJwP9P3W6eYygT6bI8Dl4q\n4X7oaZ6s9G7XbUNdvsnv2qkPlxpwJTKcO8tKAf3XXbXhXL0drDVOefj1TQIa\n36HPjsmz+pLk1mEKZNfR5ZIW/lOBoCu2Z9PhLvDmPcfzXkV4xIULWoomqsBw\ni9r1kK1ti6alV4QEzqMI4X5psKcLseihaDoCIrdcjsYfglvxliCEqqky2b6W\n+oi/bCSEBExaxtes1AEeC7HYj2JWKhdtdngRo1lJ1E83/L1nM/sqCpWV6J0w\nz2qRgvj0sbcQeYZWqXQBcKlZX1SsrRr72fX06eDjCcu3jeVKsusgwF2xDnLl\nTL0t\r\n=CFsb\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"email":"blalor@bravo5.org","name":"blalor"},{"email":"technicalpickles+hubotbot@github.com","name":"hubotbot"},{"email":"josh@technicalpickles.com","name":"technicalpickles"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hubot-mock-adapter_1.1.0_1533777540706_0.515510615851974"},"_hasShrinkwrap":false}},"readme":"# mock adapter for unit-testing Hubot\n\nI've whacked together a couple of Hubot scripts, but then they started getting\nmore complicated.  TDD is really the ONLY way to do any kind of meaningful\ndevelopment.  But even if you're not TDD'ing, you *are* testing, right?\n_Right_?\n\nI couldn't find an existing method for writing unit tests for Hubot scripts.\nAfter digging around under Hubot's hood, I figured out all I really needed was\nan `Adapter` implementation I could spy on.  That is what you see here.\n\n\n## example usage\n\nLet's assume you've got a really simple script, like this:\n\n```js\nmodule.exports = function(robot) {\n    robot.hear(/Computer!/, function(msg) {\n        msg.reply(\"Why hello there! (ticker tape, ticker tape)\");\n    });\n};\n```\n\nYou want to test this, of course.  So create a Mocha test:\n\n\n```js    \nvar expect = require(\"chai\").expect;\nvar path   = require(\"path\");\n\nvar Robot       = require(\"hubot/src/robot\");\nvar TextMessage = require(\"hubot/src/message\").TextMessage;\n\ndescribe(\"Eddie the shipboard computer\", function() {\n    var robot;\n    var user;\n    var adapter;\n\n    beforeEach(function(done) {\n        // create new robot, without http, using the mock adapter\n        robot = new Robot(null, \"mock-adapter\", false, \"Eddie\");\n\n        robot.adapter.on(\"connected\", function() {\n            // only load scripts we absolutely need, like auth.coffee\n            process.env.HUBOT_AUTH_ADMIN = \"1\";\n            robot.loadFile(\n                path.resolve(\n                    path.join(\"node_modules/hubot/src/scripts\")\n                ),\n                \"auth.coffee\"\n            );\n\n            // load the module under test and configure it for the\n            // robot.  This is in place of external-scripts\n            require(\"../index\")(robot);\n\n            // create a user\n            user = robot.brain.userForId(\"1\", {\n                name: \"mocha\",\n                room: \"#mocha\"\n            });\n\n            adapter = robot.adapter;\n                \n            done();\n        });\n\n        robot.run();\n    });\n\n    afterEach(function() {\n        robot.shutdown();\n    });\n\n    it(\"responds when greeted\", function(done) {\n        // here's where the magic happens!\n        adapter.on(\"reply\", function(envelope, strings) {\n            expect(strings[0]).match(/Why hello there/);\n\n            done();\n        });\n\n        adapter.receive(new TextMessage(user, \"Computer!\"));\n    });\n});\n```\n\nYou'll need `devDependencies` something like this in your `package.json`:\n\n```js\n\"devDependencies\": {\n  \"coffee-script\": \"~1.6.3\",\n  \"chai\": \"~1.9.0\",\n  \"hubot-mock-adapter\": \"~1.0.0\",\n  \"mocha\": \"~1.17.1\",\n  \"hubot\": \"~2.7.2\",\n  \"sinon\": \"~1.9.0\"\n}\n```\n\nThat's (almost) all there is to it!\n\n## firing up Mocha\n\nAssuming you're using [`mocha`][mocha] to run your tests, and your\ntests are in `test/`, just run `node_modules/.bin/mocha --compilers coffee:coffee-script`.\nFor less typing, in your `package.json`, add a `test` script:\n\n```js\n\"scripts\": {\n    \"test\": \"mocha --compilers coffee:coffee-script\"\n}\n```\n\nThen you can use `npm test` to run your tests!\n\n[mocha]: https://github.com/mhevery/jasmine-node\n","maintainers":[{"email":"blalor@bravo5.org","name":"blalor"},{"email":"technicalpickles+hubotbot@github.com","name":"hubotbot"},{"email":"josh@technicalpickles.com","name":"technicalpickles"}],"time":{"modified":"2018-08-09T01:19:03.544Z","created":"2013-06-28T02:57:44.663Z","1.0.0":"2013-06-28T02:57:46.030Z","1.1.0":"2018-08-09T01:19:00.782Z"},"author":{"name":"Brian Lalor","email":"blalor@bravo5.org"},"repository":{"type":"git","url":"git+https://github.com/hubotio/hubot-mock-adapter.git"},"users":{"xslim":true,"vghhkjh":true},"homepage":"https://github.com/hubotio/hubot-mock-adapter#readme","keywords":["hubot","jasmine"],"bugs":{"url":"https://github.com/hubotio/hubot-mock-adapter/issues"},"license":"WTFPL","readmeFilename":"README.md"}
