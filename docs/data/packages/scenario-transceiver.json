{"_id":"scenario-transceiver","_rev":"3-feca833f60b67fb580d5d27abec5f909","name":"scenario-transceiver","dist-tags":{"latest":"0.0.1"},"versions":{"0.0.1":{"name":"scenario-transceiver","version":"0.0.1","description":"message receiver and sender library.","scripts":{"test":"mocha"},"main":"lib/","directories":{"lib":"lib"},"repository":{"type":"git","url":"git+https://github.com/lisb/scenario-transceiver.git"},"keywords":["hubot","daab","scenario"],"author":{"name":"yoshihide.nabeyama"},"license":"MIT","bugs":{"url":"https://github.com/lisb/scenario-transceiver/issues"},"homepage":"https://github.com/lisb/scenario-transceiver","devDependencies":{"mocha":"^3.5.0","safe-regex":"^1.1.0"},"dependencies":{"joi":"^13.4.0","lodash":"^4.17.10"},"gitHead":"e1129fd26baf5450b8ceb4696191e551b9318b9d","_id":"scenario-transceiver@0.0.1","_npmVersion":"6.1.0","_nodeVersion":"8.11.3","_npmUser":{"name":"lisb","email":"info@l-is-b.com"},"dist":{"integrity":"sha512-P6xdzImPa3w9ZIGy0FqdDjzQ3XUbiN4HjzVKsdMf9ZJiO9LJpZJtsNeqVNEnmiojgEfA1QP4QBCNP3GejXlEbw==","shasum":"43f76189a075dbdcaedad81ffb1ba96e70ac2702","tarball":"https://registry.npmjs.org/scenario-transceiver/-/scenario-transceiver-0.0.1.tgz","fileCount":25,"unpackedSize":59551,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbRNEaCRA9TVsSAnZWagAAMtAP/1lMh7wERENbw1Ux5bl7\nlk3swwnCgEixzbR0lv1Xh+RZcpN9yhNy+bY7o4YrR1dZJJNuswuRQzAXb9x8\nTmwOhQAZPtbhskDkOHtXhG8NEivdfg97FfKsRbUBqnPxeIAdt3XS+rPQpHnV\n9HGzzaKzOfhKbLpAYqTLpqhAi0Ak1YhgrCS7Nj9K3PE5pNyifFly17Jttwkb\nhsRqFohHjeejle5gWEGZAlDewtX06r77vV46yGJQysGVleyxKvSAFvYpbdVB\nIA/4s0Kd2UUlqdbPM+BhIMZhPFm8CV3CbZybWc2zCuU1igdXHpz+o28Jq3ij\no1uEnX/iTLq43G2SN0UwjTWfv2pCD4k9r44NNs5ohkMAhbvL9v2UKEEMH2ka\nRYWlUYOO843MUTm/lvGx9MPU4nYvjvrfJ+ZftrZIg9jvndgtyp/hMKllWh71\nvL7bVcQRr8Y9mmDpbr9k1D6YwwrWXLtR0/OQr+NUtjqCpJMWwRRmDhGO+U6v\n07pgV5uzzKAp6PBCZzxhRXaAq0sGJxhcVmG4/Z9Ub7inGSfmGvV0gLGGTPHA\nmlr8+1xxl263IKvILfPF0TdcXjxS2sm95dn1NXKgbKk9o0wHNzENUzpVDKjp\nzA5SCKpAJE23I0FcPWJ+TEoHjBIKyjX6zZz0RbxIZ8SuM41jDUSI7scPslNg\nN5ir\r\n=cq2x\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"lisb","email":"info@l-is-b.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/scenario-transceiver_0.0.1_1531236634920_0.9552931145911743"},"_hasShrinkwrap":false}},"time":{"created":"2018-07-10T15:30:34.919Z","0.0.1":"2018-07-10T15:30:34.995Z","modified":"2020-02-26T02:38:29.766Z"},"maintainers":[{"email":"krdlab@gmail.com","name":"krdlab"},{"email":"expensive.frog@gmail.com","name":"happy_tanuki"},{"email":"info@l-is-b.com","name":"lisb.dev"}],"description":"message receiver and sender library.","homepage":"https://github.com/lisb/scenario-transceiver","keywords":["hubot","daab","scenario"],"repository":{"type":"git","url":"git+https://github.com/lisb/scenario-transceiver.git"},"author":{"name":"yoshihide.nabeyama"},"bugs":{"url":"https://github.com/lisb/scenario-transceiver/issues"},"license":"MIT","readme":"# ScenarioTransceiver\nメッセージ送信/受信をサポートするパッケージ\n---\n\n## Require\nnode8+  \nlodash  \njoi   \n\n\n## Usage\n\n\n```\nconst path = require('path');\nconst { ScenarioTransceiver } = require('scenario-transceiver');\n\n// 読み込むメッセージノートのパスを指定\nconst st = new ScenarioTransceiver(path.resolve('test/notes'));\n\n\n\n// 送信メッセージを生成する\nconst message1 = st.generate({ key: 'USER:HOME' });\nconsole.log('\\nmessage1:', message1);\n\nconst message2 = st.generate({ key: 'USER:HELLO' });\nconsole.log('\\nmessage2:', message2);\n\nconst message3 = st.generate({ key: 'USER:APPROVE:REASON', opts: { startDate: '10月10日', startTime: '22時30分' } });\nconsole.log('\\nmessage3:', message3);\n//res.send(message);\n\n\n\n// メッセージキーと抽出項目を取得する\n// 受信メッセージパターンに一致する対象が存在しない場合は、それぞれのパラメータにundefinedを返す\nconst { key, opts } = st.parse(message3.question);\n\nconsole.log('key:', key);\nconsole.log('opts:', opts);\n```\n\n### 本文オプション/選択肢オプション\n\n本文や選択肢生成の為のオプションメソッドを使用し、動的項目を含めたメッセージを作成する。\n\ntest/notes/note-x.js\n\n```js\nconst { MessageTransceiver } = require('scenario-transceiver');\nconst q = MessageTransceiver.generateQuestion;\nconst o = MessageTransceiver.generateOptions;\n\nmodule.exports = {\n  'BOOK': {\n    'LIST': {\n      question: [\n        q.regular('有効な本の一覧です。無効なものは表示されません。'),\n      ],\n      options: [\n        o.either({ item: 'valid1', truthy: [ '有効な本：', { item: 'bookName1' } ], falsy: '' }),\n        o.either({ item: 'valid2', truthy: [ '有効な本：', { item: 'bookName2' } ], falsy: '' }),\n      ]\n    },\n    'ALL_LIST': {\n      question: [\n        q.regular('本の一覧です。'),\n      ],\n      options: [\n        o.list({ item: 'bookName' })\n      ]\n    },\n    'DETAIL': {\n      question: [\n        q.regular('本の情報'),\n        q.regular('No.', { reg: '([0-9]+)', item: 'recordNo' }),\n        q.regular({ reg: '([^]*)', item: 'details' })\n      ],\n      options: [\n        o.regular('借りる'),\n        o.regular({ item: 'shareService' }, 'で共有する'),\n        o.regular('戻る')\n      ]\n    }\n  }\n};\n```\n\n### [本文オプション] question.regular\n\n* セレクトスタンプの本文を作成するメソッド  \nArray-likeな値を渡すことで文字列を生成する。\n\n```js\nconst { MessageTransceiver } = require('scenario-transceiver');\nconst q = MessageTransceiver.generateQuestion;\nconst o = MessageTransceiver.generateOptions;\n\nmodule.exports = {\n  'DETAIL': {\n    question: [\n      q.regular('本の情報'),\n      q.regular('No.', { reg: '([0-9]+)', item: 'recordNo' }),\n      q.regular({ reg: '([^]*)', item: 'details' })\n    ],\n    options: [\n      o.regular('借りる'),\n      o.regular({ item: 'shareService' }, 'で共有する'),\n      o.regular('戻る')\n    ]\n  }\n};\n```\n\n* 送信メッセージの作成と受信メッセージの正規表現の作成を兼ねている為、動的項目には`reg`に一致させる正規表現を渡す必要がある。\n* 動的項目は`item`プロパティに渡す。\n* 送信メッセージの作成時に、動的項目を`item`に渡すことで動的な本文を作成する。\n* 動的項目の正規表現を`reg`に渡してあることから、受信メッセージの判別を行い、その項目に該当する値を抽出して`item`の値をプロパティ名としたオブジェクトを取得できる。\n例）opts.recordNo// '123'\n\n### [本文削除オプション] question.remove*\n\n* 条件によって行の非出力を行うメソッド\n* 本文オプションを引数として実行する\n`q.removeIncludeFalsy(q.regular({ reg: '(.+)', item: 'item1' }))`\n\n#### [本文削除オプション] removeIncludeFalsy()\n項目内にfalsyが含まれる場合、その項目を非出力とする\n  \n#### [本文削除オプション] removeIncludeStrictFalse()\n項目内にfalseが含まれる場合、その項目を非出力とする\n  \n#### [本文削除オプション] removeIsFalsy()\n項目内全てがfalsyの場合、その項目を非出力とする\n\n#### [本文削除オプション] removeIsStrictFalse()\n項目内全てがfalseの場合、その項目を非出力とする\n\n例）\n```js\nq.removeIncludeFalsy(q.regular({ reg: '(.+)', item: 'item1' })),\n```\n\n#### [本文オプション] default\n項目内にdefaultがある場合、itemで指定したプロパティが存在しない場合に、defaultの値を出力する\n\n例）\n```js\nconst today = (d = new Date) => `${d.getFullYear()}月${d.getMonth() + 1}日`;\n...\nq.regular({ reg: '(.+)', item: 'no_exist', default: 'Hi' }),\nq.regular({ reg: '(.+)', item: 'no_exist', default: today() }),\n```\n\n\n\n### [選択肢オプション] option.regular(value1, value1, ...)\n\n* セレクトスタンプの選択肢を作成するメソッド\nArray-likeな値を渡すことで選択肢文字列を生成する。\n* 本文オプションとは異なり、正規表現のプロパティを持たない。\n\n```js\noptions: [\n  o.regular('借りる'),\n  o.regular({ item: 'shareService' }, 'で共有する'),\n  o.regular('戻る')\n]\n```\n\n\n### [選択肢オプション] option.either(value)\n\n* `item`がtruthyかどうかで、`truthy`プロパティか`faly`プロパティかどちらかが有効となる。\n* 引数には１オブジェクトのみを渡す\n\n```js\noptions: [\n  o.either({ item: 'valid1', truthy: [ '有効な本：', { item: 'bookName1' } ], falsy: '' }),\n  o.either({ item: 'valid2', truthy: [ '有効な本：', { item: 'bookName2' } ], falsy: '' }),\n]\n```\n\n### [選択肢オプション] option.list(value)\n\n* `item`プロパティで示すオブジェクトのプロパティを、選択肢としてリスト出力する。\n\n```js\n'ALL_LIST': {\n  question: [\n    q.regular('本の一覧です。'),\n  ],\n  options: [\n    o.list({ item: 'bookName' })\n  ]\n}\n```\n\n\n\n\n\n## Test\n\n`npm test`  \n\ntest/scenario-transceiver.test.js  \n\n```js\nconst assert = require('assert');\nconst safeRegex = require('safe-regex');\nconst { ScenarioTransceiver } = require('scenario-transceiver');\n\nconst st = new ScenarioTransceiver('./test/notes');\n\n\n/** @test {ScenarioTransceiver} */\ndescribe('ScenarioTransceiver', () => {\n\n  /** @test {ScenarioTransceiver.generate} */\n  describe('ScenarioTransceiver.generate', () => {\n\n    it('USER:HELLO', () => {\n      const message = st.generate({ key: 'USER:HELLO' });\n\n      assert.deepStrictEqual(message, { text: 'おはよう。' });\n    });\n\n    it('USER:HOME', () => {\n      const message = st.generate({ key: 'USER:HOME' });\n\n      assert.deepStrictEqual(\n        message,\n        {\n          question: '何をしますか？',\n          options: [\n            '本を探す',\n            '本を返す',\n            'おすすめ一覧',\n          ]\n        }\n      );\n    });\n\n    it('USER:APPROVE:REASON', () => {\n      const testOpts = { startDate: '10月10日', startTime: '22時30分' };\n      const message = st.generate({ key: 'USER:APPROVE:REASON', opts: testOpts });\n\n      assert.deepStrictEqual(\n        message,\n        {\n          question: [\n            '理由はなんですか？',\n            `開始日：${ testOpts.startDate }、開始時刻：${ testOpts.startTime }`,\n          ].join('\\n'),\n          options: [\n            'キャンセル',\n          ]\n        }\n      );\n    });\n\n    it('USER:AWAY NOT FOUND.', () => {\n      const testOpts = { key: 'USER:AWAY', opts: {} };\n      const message = st.generate(testOpts);\n\n      assert.deepStrictEqual(message, false);\n    });\n\n    it('[EXAMPLE] BOOK:LIST', () => {\n      const testOpts = { valid1: 'truthy...', bookName1: 'こころ', valid2: 0, bookName2: '我輩は' };\n      const message = st.generate({ key: 'BOOK:LIST', opts: testOpts });\n\n      assert.deepStrictEqual(\n        message,\n        {\n          question: '有効な本の一覧です。無効なものは表示されません。',\n          options: [\n            `有効な本：${ testOpts.bookName1 }`,\n          ]\n        }\n      );\n    });\n\n    it('[EXAMPLE] BOOK:ALL_LIST', () => {\n      const testOpts = {\n        bookName: [\n          'こころ',\n          '我輩は',\n          '学問の',\n        ]\n      };\n      const message = st.generate({ key: 'BOOK:ALL_LIST', opts: testOpts });\n\n      assert.deepStrictEqual(\n        message,\n        {\n          question: '本の一覧です。',\n          options: testOpts.bookName\n        }\n      );\n    });\n\n    it('[EXAMPLE] BOOK:DETAIL', () => {\n      const testOpts = { recordNo: 1234, details: 'この本のあらすじは、\\n~~~~~~~です。', shareService: 'twitter' };\n      const message = st.generate({ key: 'BOOK:DETAIL', opts: testOpts });\n\n      assert.deepStrictEqual(\n        message,\n        {\n          question: [\n            '本の情報',\n            `No.${ testOpts.recordNo }`,\n            testOpts.details\n          ].join('\\n'),\n          options: [\n            '借りる',\n            `${ testOpts.shareService }で共有する`,\n            '戻る'\n          ]\n        }\n      );\n    });\n  });\n\n\n  /** @test {ScenarioTransceiver.parse} */\n  describe('ScenarioTransceiver.parse', () => {\n\n    it('USER:HOME', () => {\n      const testOpts = { key: 'USER:HOME', opts: {} };\n      const message = st.generate(testOpts);\n      const { key, opts } = st.parse(message.question);\n\n      assert.deepStrictEqual({ key, opts }, testOpts);\n    });\n\n    it('USER:HOME MESSAGE NOT FOUND.', () => {\n      const testOpts = { key: 'USER:HOME', opts: {} };\n      const message = st.generate(testOpts);\n      const { key, opts } = st.parse('見つからないメッセージ例');\n\n      assert.deepStrictEqual({ key, opts }, { key: undefined, opts: undefined });\n    });\n\n  });\n\n});\n```\n","readmeFilename":"README.md"}