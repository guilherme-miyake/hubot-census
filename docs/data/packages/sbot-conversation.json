{"_id":"sbot-conversation","_rev":"7-375bc477d69d945f497e0967bd745b3d","name":"sbot-conversation","dist-tags":{"latest":"1.5.0"},"versions":{"1.0.0":{"name":"sbot-conversation","version":"1.0.0","description":"A conversation session implement for hubot","main":"./lib","scripts":{"lint":"eslint .","lint:fix":"eslint . --fix","test":"mocha --require babel-register --check-leaks --bail --exit","test:cov":"nyc --reporter=html --reporter=text mocha --require babel-register --check-leaks --bail --exit","test:ci":"nyc --reporter=html --reporter=text-lcov > coverage.lcov mocha --require babel-register --check-leaks --bail --exit","build:doc":"./docs.sh"},"repository":{"type":"git","url":"git+https://github.com/sactive/sbot-conversation.git"},"keywords":["hubot","conversation","session"],"author":{"name":"Pooky"},"license":"MIT","bugs":{"url":"https://github.com/sactive/sbot-conversation/issues"},"homepage":"https://github.com/sactive/sbot-conversation#readme","dependencies":{"async-series":"0.0.1","extend":"^3.0.1","jsonschema":"^1.2.4","lodash":"^4.17.10","moment":"^2.22.2"},"devDependencies":{"babel-register":"^6.26.0","chai":"^4.1.2","coffee-script":"^1.12.7","eslint":"^4.19.1","eslint-config-sactive":"^2.0.0","eslint-config-standard":"^11.0.0","eslint-plugin-import":"^2.12.0","eslint-plugin-node":"^6.0.1","eslint-plugin-promise":"^3.8.0","eslint-plugin-standard":"^3.1.0","hubot":"^2.19.0","hubot-test-helper":"1.5.0","jsdoc-to-markdown":"^4.0.1","mocha":"^5.2.0","nyc":"^12.0.2"},"gitHead":"3a4640cb3bc9bf5ed18165a8687e8c853669d6d7","_id":"sbot-conversation@1.0.0","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"},"dist":{"integrity":"sha512-YmqYETYw3kxNab/BaugWmBr7KT+IqbFqJzTgmNLnYApFFusGYGw9MGeAvqSxfSH9nzuQ5XrQxul3OVgjEZUqCg==","shasum":"e6099c78f9c6270e3f5d94ab8652765f6a82f580","tarball":"https://registry.npmjs.org/sbot-conversation/-/sbot-conversation-1.0.0.tgz","fileCount":26,"unpackedSize":77744,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbPNACCRA9TVsSAnZWagAAg0kP/2XvfpSiR23lb2rBPwdc\nOzlcNFZg8KIyos31k0y+mJm2+W3ijO0Qfn8SwL8Nqh0H5NdVhKQPatyTpwFW\n2wQDI5jPLTVpUXqeJ7PTYDcsBtdzcp3vKBOd2qHa22gMLjtQlcAEco6Z2VHB\nKr1x1NemDgmotbFGA35/PoRBjmLVg3vsKV9hKHgH9BAS56qP6XtvD43mIb4N\nHmJ6ArJzqHUE7ua7HB5Yh+apmMHXDUnLFeZiBDljsIKM3xDL39kfjTTr39Q9\n/gr95TizrfLMqobnn8rspI6BZNyiD7ADbjXtYmJPF9i07Zpo2iHiTtgr9ypY\nAr3JsEhw2NMj72OPL/cWC2K2bRlsyig1yl6MveQTBKHSrr5omCc3WeR91/Qy\nI8Mupr/Z1xjOEdlIbwwYL3YPMc144IqMa8/QPxEQ+XOpJ8IqqoZFo/8NOE48\n64431kY/8HIQfqSVSnirpbLTnqaJMPSQpDxpapqR07lCEKOhSnHTAjMHTlhm\nLo7cv1WQpR5ta/xRltwiKoyVM0GmidsPolEKZZaTezLCizZrZiea0TTkHYL7\n+r8Ud9w7GQKB8cVpgqEFPCzka1zviSV3RXxuYEm+hg0FBjMZgZMAyIIkFS8r\n34VG/wDjSt+aX+9mikA1BFlx9lYdLpdtaa9ckGGqAQPRkA8Hz+vxZ5X0OIQH\n3Sxo\r\n=kttp\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sbot-conversation_1.0.0_1530712066307_0.6944619533284946"},"_hasShrinkwrap":false},"1.1.0":{"name":"sbot-conversation","version":"1.1.0","description":"A conversation session implement for hubot","main":"./lib","scripts":{"lint":"eslint .","lint:fix":"eslint . --fix","test":"mocha --require babel-register --check-leaks --bail --exit","test:cov":"nyc --reporter=html --reporter=text mocha --require babel-register --check-leaks --bail --exit","test:ci":"nyc --reporter=html --reporter=text-lcov > coverage.lcov mocha --require babel-register --check-leaks --bail --exit","build:doc":"./docs.sh"},"repository":{"type":"git","url":"git+https://github.com/sactive/sbot-conversation.git"},"keywords":["hubot","conversation","session","chatops","chatbot","bot"],"author":{"name":"Pooky"},"license":"MIT","bugs":{"url":"https://github.com/sactive/sbot-conversation/issues"},"homepage":"https://github.com/sactive/sbot-conversation#readme","dependencies":{"async-series":"0.0.1","extend":"^3.0.1","jsonschema":"^1.2.4","lodash":"^4.17.10","moment":"^2.22.2"},"devDependencies":{"babel-register":"^6.26.0","chai":"^4.1.2","coffee-script":"^1.12.7","eslint":"^4.19.1","eslint-config-sactive":"^2.0.0","eslint-config-standard":"^11.0.0","eslint-plugin-import":"^2.12.0","eslint-plugin-node":"^6.0.1","eslint-plugin-promise":"^3.8.0","eslint-plugin-standard":"^3.1.0","hubot":"^2.19.0","hubot-test-helper":"1.5.0","jsdoc-to-markdown":"^4.0.1","mocha":"^5.2.0","nyc":"^12.0.2"},"gitHead":"d46b41b0308801969a7a4a42c7411e62ab2c3d50","_id":"sbot-conversation@1.1.0","_npmVersion":"6.1.0","_nodeVersion":"8.9.1","_npmUser":{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"},"dist":{"integrity":"sha512-GJfmS5j4Gedh/WVs4rdiCec1cztQIWVPr1bKIveytnoiQl/9kuQ6Ojn4cYUoi3DbtHUgLl7ZR8+7v5BZjWB09Q==","shasum":"1baecb790bb29c7b53a1332452fa541a5ade5315","tarball":"https://registry.npmjs.org/sbot-conversation/-/sbot-conversation-1.1.0.tgz","fileCount":28,"unpackedSize":79726,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbPZFWCRA9TVsSAnZWagAAtQoP/iuKxFVqz82XBrR8lEQ6\ndc/QiJO12niZVzKXKnu6TRsBEenKtGetMe15u7R49R05djjv6TOd64BFAVLB\nHxxhHzoM6Fk6tivloZ7UdYtfyd3BDgFGGGFypB+8L8Cbw8gP7p9p9USYIpca\nR5lAZGvL+vm72euVU9q4z5D5jrqLYmoWhLehO3vrTHHJ0nvGWRjKoAJj6v3q\nL7Ng6obBih4ud35+2EeQHaVTtoW4wXmriZH0vRJAwdaffAbVYMkq5F066FJs\nhrqHUACN2pbzq/87wFvwglTlB5X3JpeAyasYUj+YNKB0zIwdBfm/mLyS6PHB\nBkNsYN01oAzmRdz5jpnn1iLpajAiVmzWALhvLxVRmoQIE1LddqOZe3lsm77/\nrKjl41LOFsXgAvnzph5jzc6q52iYtikjGJoEpCTYyJ5MYvgA6zJuzHMj15ug\nRdisC9+k3qiSvr+Ugxq/k1JkeAlCCvRvG8fAQBEivc+6M2TlBgBCUXvEvuxZ\nroRF0L58dPv2rsehxqrNXFDBVjh+vbuUlRd198jl7uL+gI261azS/JyQwEkt\nqn3U6R2pFQtABiFYBnGfZoNfX0VgGRgDTJJR3TQ7ll7eV54sSun95Ph63Y+7\nwgBcnAGM7+Qtqq7Zm/coP9eovxwi8br/fQrxsIlZcbesW0U4G+AQrKlt2G+0\n8lQd\r\n=5LkG\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sbot-conversation_1.1.0_1530761558289_0.6350375086452087"},"_hasShrinkwrap":false},"1.2.0":{"name":"sbot-conversation","version":"1.2.0","description":"A conversation implement for hubot","main":"./lib","scripts":{"lint":"eslint .","lint:fix":"eslint . --fix","test":"mocha --require babel-register --check-leaks --bail --exit","test:cov":"nyc --reporter=html --reporter=text mocha --require babel-register --check-leaks --bail --exit","test:ci":"nyc --reporter=html --reporter=text-lcov > coverage.lcov mocha --require babel-register --check-leaks --bail --exit","build:doc":"./docs.sh"},"repository":{"type":"git","url":"git+https://github.com/sactive/sbot-conversation.git"},"keywords":["hubot","conversation","session","chatops","chatbot","bot"],"author":{"name":"Pooky"},"license":"MIT","bugs":{"url":"https://github.com/sactive/sbot-conversation/issues"},"homepage":"https://github.com/sactive/sbot-conversation#readme","dependencies":{"async-series":"0.0.1","extend":"^3.0.1","jsonschema":"^1.2.4","lodash":"^4.17.10","moment":"^2.22.2"},"devDependencies":{"babel-register":"^6.26.0","chai":"^4.1.2","coffee-script":"^1.12.7","eslint":"^4.19.1","eslint-config-sactive":"^2.0.0","eslint-config-standard":"^11.0.0","eslint-plugin-import":"^2.12.0","eslint-plugin-node":"^6.0.1","eslint-plugin-promise":"^3.8.0","eslint-plugin-standard":"^3.1.0","hubot":"^2.19.0","hubot-test-helper":"1.5.0","jsdoc-to-markdown":"^4.0.1","mocha":"^5.2.0","nyc":"^12.0.2"},"gitHead":"c36c20313adc63617abeb5bff5ef3dabf71250b4","_id":"sbot-conversation@1.2.0","_npmVersion":"6.1.0","_nodeVersion":"8.9.1","_npmUser":{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"},"dist":{"integrity":"sha512-VSwBLX6s8HxiSv+oVWV1g4sMnhwDtGYZfq7r1Kpd/PA0WRaz6WiD08reosMB/1xKDPS7ZQjOQXtpwWfn1+Cjcw==","shasum":"05b77f896fbe24bd18f8e88d3c60fb23d1136b16","tarball":"https://registry.npmjs.org/sbot-conversation/-/sbot-conversation-1.2.0.tgz","fileCount":28,"unpackedSize":80403,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbPdz+CRA9TVsSAnZWagAA3Y8P/04WByIKUN96nkLtO0wY\nhtYNIQwvUV4z3xuQpuaIA0E5bk9RO3VUT+a0lHXZBjp+RbqWL1MLyKKVbSOl\nHQ2OKQGQx8uMs23hKAqXt+nsgItJlYydLUqygA5YlUgn9aTVQeMKCFUSEdWE\nSJVyI3Wk5I4Xh0iiPBExrHPYwiyOMnfSuGcE7KEWnxWQk1KmDDz4/d7OK2YL\naal7v+Wjixsv1g4GkTSGZIkvRXU7NdY/NN8BwGyZ+iUBzUL3x873vA9OqhKf\n3dOKxAf28OnMysuGaA9oJOeIT8dAEcNVpEggNF0u4aEMKXKhurVgXzxHM2KC\n6BCyXMX1pdGRZAx6EjZAclc1wQj4dD3k+E/LymS1ztCq/xNZEcl8JK0GGLNW\nUK0sifV8rj53g9qa5l8ZGOjIEMr0cMgjmcg0Ipu7J0HkXNsGAAKvp6J1RUQ7\nTcYuuqtViy1pGf62CsvWhLKKftV4ZR+BYdqAKPidib6UccoZGhH5zliE/+gl\n+m5/dfQRyGAHj5gGhCtB1OH89lVZAXQq11XAz20iyfNIL4DtyQMxM5NcLTKb\n8A6+PEyx3+B7nxnJS3IC1Y0Gwn7aiW/QpGNNKN3excdkG/Jm3XhrNuVWuSJC\nQIFKWqpox81+OphP2vgPzNNkqDkV+gfUe9o4nifvrFP2ZY5vmGwFE2P/C0W8\nh7eB\r\n=GVHN\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sbot-conversation_1.2.0_1530780926363_0.9307139187238891"},"_hasShrinkwrap":false},"1.3.0":{"name":"sbot-conversation","version":"1.3.0","description":"A conversation implement for hubot","main":"./lib","scripts":{"lint":"eslint .","lint:fix":"eslint . --fix","test":"mocha --require babel-register --check-leaks --bail --exit","test:cov":"nyc --reporter=html --reporter=text mocha --require babel-register --check-leaks --bail --exit","test:ci":"nyc --reporter=html --reporter=text-lcov > coverage.lcov mocha --require babel-register --check-leaks --bail --exit","build:doc":"./docs.sh"},"repository":{"type":"git","url":"git+https://github.com/sactive/sbot-conversation.git"},"keywords":["hubot","conversation","session","chatops","chatbot","bot"],"author":{"name":"Pooky"},"license":"MIT","bugs":{"url":"https://github.com/sactive/sbot-conversation/issues"},"homepage":"https://github.com/sactive/sbot-conversation#readme","dependencies":{"async-series":"0.0.1","extend":"^3.0.1","jsonschema":"^1.2.4","lodash":"^4.17.10","moment":"^2.22.2"},"devDependencies":{"babel-register":"^6.26.0","chai":"^4.1.2","coffee-script":"^1.12.7","eslint":"^4.19.1","eslint-config-sactive":"^2.0.0","eslint-config-standard":"^11.0.0","eslint-plugin-import":"^2.12.0","eslint-plugin-node":"^6.0.1","eslint-plugin-promise":"^3.8.0","eslint-plugin-standard":"^3.1.0","hubot":"^2.19.0","hubot-test-helper":"1.5.0","jsdoc-to-markdown":"^4.0.1","mocha":"^5.2.0","nyc":"^12.0.2"},"gitHead":"7893e736ed844825b51c46c1fc435aefa1f06528","_id":"sbot-conversation@1.3.0","_npmVersion":"6.1.0","_nodeVersion":"8.9.1","_npmUser":{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"},"dist":{"integrity":"sha512-zM15M9818mZ6Gt6BrU5dPcLLVDehFAguCY9/0cVFZLYT1gVY9ugcTUVHYAW5YpCP2gYWTbBR9CGu8Ai7oFMHjA==","shasum":"76e44312a801265a950024661bdf18b13def632f","tarball":"https://registry.npmjs.org/sbot-conversation/-/sbot-conversation-1.3.0.tgz","fileCount":28,"unpackedSize":82320,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbPs7HCRA9TVsSAnZWagAABrkP/0e3WwaDDAClE1M/yOK/\nUQl3Bex74+YfO3kYRlN9n4o6L0gJnxJ5ltAFi2LZSn6FwU1/9J3fy8SG2usn\nnmmceQR/qPLNmBmjkZt4evCsq53HDwZUbCQEnzkkkJjUk0SI0uVLhY5QJ/0A\nY19z/qaYKPxR+16H3SIgRlLkzV8+O/0U9OgXHNGRZP3prL6SWtcxdY1LfiDl\nCh9C80DbMy+rkzw4YnHuocUxTOADwQPGY49sGTmXqWVd1MwYbONqp4TKVzj/\n38zJaAD9adCCWq9wJCNIMDJ8/18QQUXOJ1BTI6MD9RoLC0+Q/smtQNVQcLTB\neeURhJp3Q7TomYRVuV7JUN6Fz+9kJ2a4X78i+g/m2Ld1s/8FVlg6n40TdiiL\n/Y/M2davzl/5H3F0iB/Vfpbif8A+r+pU54Hsnz/3zaLi8wVsNd6nd8JHIRqS\nRiirWeJWjrvEhGe9dV/Gb3D6RkA6Bhcf1fbg2YtIqjlfoLDd58eD6eI5aCCw\nnSnwGhCUq3bQClfhrQ3KbWllrYSbg/lXbwlUCtDUKSedv9sq63He9TpTHGLP\na99wmJWJBl1r9K3zWtcLhCVDRqZy5cl+4H92VhPNeBsc2IjI9uMPDtKeKZgw\ny56G9lkeMeJune3/YBzdkfHBsKPEaBy4j973IjMRCn9N88x+Zqmj4YbgTa2O\nOR5F\r\n=QPrM\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sbot-conversation_1.3.0_1530842823753_0.08341504290946178"},"_hasShrinkwrap":false},"1.3.1":{"name":"sbot-conversation","version":"1.3.1","description":"A conversation implement for hubot","main":"./lib","scripts":{"lint":"eslint .","lint:fix":"eslint . --fix","test":"mocha --require babel-register --check-leaks --bail --exit","test:cov":"nyc --reporter=html --reporter=text mocha --require babel-register --check-leaks --bail --exit","test:ci":"nyc --reporter=html --reporter=text-lcov > coverage.lcov mocha --require babel-register --check-leaks --bail --exit","build:doc":"./docs.sh"},"repository":{"type":"git","url":"git+https://github.com/sactive/sbot-conversation.git"},"keywords":["hubot","conversation","session","chatops","chatbot","bot"],"author":{"name":"Pooky"},"license":"MIT","bugs":{"url":"https://github.com/sactive/sbot-conversation/issues"},"homepage":"https://github.com/sactive/sbot-conversation#readme","dependencies":{"async-series":"0.0.1","extend":"^3.0.1","jsonschema":"^1.2.4","lodash":"^4.17.10","moment":"^2.22.2"},"devDependencies":{"babel-register":"^6.26.0","chai":"^4.1.2","coffee-script":"^1.12.7","eslint":"^4.19.1","eslint-config-sactive":"^2.0.0","eslint-config-standard":"^11.0.0","eslint-plugin-import":"^2.12.0","eslint-plugin-node":"^6.0.1","eslint-plugin-promise":"^3.8.0","eslint-plugin-standard":"^3.1.0","hubot":"^2.19.0","hubot-test-helper":"1.5.0","jsdoc-to-markdown":"^4.0.1","mocha":"^5.2.0","nyc":"^12.0.2"},"gitHead":"ff179897bf2150f043478133fbb3d2bf38a3aaaa","_id":"sbot-conversation@1.3.1","_npmVersion":"6.1.0","_nodeVersion":"8.9.1","_npmUser":{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"},"dist":{"integrity":"sha512-u7YwXXKEnXCASioXX7Ye/iCpqutB36BNrWRfUpRzqnx88R5ov3kWXH/c75ba3rqLbla3xoPCD+u869IHUj3l4g==","shasum":"6cf6f327a0ad312a1f7820603ab976dde0ddcd83","tarball":"https://registry.npmjs.org/sbot-conversation/-/sbot-conversation-1.3.1.tgz","fileCount":29,"unpackedSize":84045,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbPwSICRA9TVsSAnZWagAAgHIP/RULHD55yoVohDYltOGO\n6s6ypMNdUtVaFPaFdfufVSuHDlxP/HDM24n7xJ5BHk6OJv4ci3wz0uZKXmPq\nCsvar13mXwryLzNiTPYK9eqyoUfWoq6ijZX6tRPOeXEO19yOMkQnw355fkDp\nckzqHkQFLYIdnjDp31QjnFCLvrLnnDv0oMjRcJzzWpmVQzuUHzOJiQHv2mOi\n6GDPRiJbe4erHElIC4xpj7B5BX0hnCogPJPaVrFqRizTcBEDTOxtdOVPhXw0\nhHbDrt/NHpN9bdaIkxXKRHaUXGPa+BBgn9RviNhsHbZ6fCXEvyWvVx7d0dC+\n2bu4Gub4kDbHd0lkra0fd2LUdT/1FhoiFlJpwHpingvfBYw+KHC9USlQc/W7\nQ3mn33kme2eFsyjmgRtLjI9qUt+ANiwKJ6dh8nYTHiNndAbkSvH48ZmSpFjG\nGQ1XYe2i4GBor546sD+CIACIlrHBWLm2uHoz8meHwkJYzO8+CE0rCqtRqaoN\nap8gQvDVvs+xAxqk8fpPYI/e8M0/AmW4t3Z0ERJFreeQjodAioKgl5US54hT\nAxLJKsTWmGfqk+mXHJAoZtnPKc8CnschQAl1F0oTyAKdoCYwtVqiq+o6DA6v\n9c+kg3JgU7+L2AAj/mBw+nYx8Hw3J+l4NnbRPDofuXHTP97YdIBLfQ4G95FQ\n9GQI\r\n=W6v6\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sbot-conversation_1.3.1_1530856584280_0.3111141085720568"},"_hasShrinkwrap":false},"1.4.0":{"name":"sbot-conversation","version":"1.4.0","description":"A conversation implement for hubot","main":"./lib","scripts":{"lint":"eslint .","lint:fix":"eslint . --fix","test":"mocha --require babel-register --check-leaks --bail --exit","test:cov":"nyc --reporter=html --reporter=text mocha --require babel-register --check-leaks --bail --exit","test:ci":"nyc --reporter=html --reporter=text-lcov > coverage.lcov mocha --require babel-register --check-leaks --bail --exit","build:doc":"./docs.sh"},"repository":{"type":"git","url":"git+https://github.com/sactive/sbot-conversation.git"},"keywords":["hubot","conversation","session","chatops","chatbot","bot"],"author":{"name":"Pooky"},"license":"MIT","bugs":{"url":"https://github.com/sactive/sbot-conversation/issues"},"homepage":"https://github.com/sactive/sbot-conversation#readme","dependencies":{"async-series":"0.0.1","extend":"^3.0.1","jsonschema":"^1.2.4","lodash":"^4.17.10","moment":"^2.22.2"},"devDependencies":{"babel-register":"^6.26.0","chai":"^4.1.2","coffee-script":"^1.12.7","eslint":"^4.19.1","eslint-config-sactive":"^2.0.0","eslint-config-standard":"^11.0.0","eslint-plugin-import":"^2.12.0","eslint-plugin-node":"^6.0.1","eslint-plugin-promise":"^3.8.0","eslint-plugin-standard":"^3.1.0","hubot":"^2.19.0","hubot-test-helper":"1.5.0","jsdoc-to-markdown":"^4.0.1","mocha":"^5.2.0","nyc":"^12.0.2"},"gitHead":"1193b6393fb415d622ae68af5727437d02e81a80","_id":"sbot-conversation@1.4.0","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"},"dist":{"integrity":"sha512-Ps4szAutZS37IokiqUKhH+vQLLCCKH+UECckr9oUXrn7PAvfUcpByoZu1qGbtsnfhQB5j67JTLtLgHsAdSxf5A==","shasum":"d53f9bd0787bb9eddb0def4dd0c02b6b25fe735c","tarball":"https://registry.npmjs.org/sbot-conversation/-/sbot-conversation-1.4.0.tgz","fileCount":29,"unpackedSize":86636,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbQF2uCRA9TVsSAnZWagAAkjwP/ipywCrrVAjYsMSX4oRN\n1iGJ8Nbm70DTtAlm/dbHkEoTIV8G6v4WRn4A8mSb5If0+a7sysOmxjaK2el6\nxR4mxzuJ8SLuS4a9SM9eFt6ANRfCTdKqI2vEipdEgdjnIRdW66PPchudGi8y\nJXycz+hAPwLevCdEbuu9RfDuh7DzMRx8lDhGxmM4V3lg64Fv3udDbWbCVbMv\nkPTDoEYf62XHITs49HOhT1LoKdLh++XcIWOeFONs5ZDc47OHX4De0guM6ZHx\n29yzbekeaEDvrrV5MfSMI5vvhnZgyZp7JghNka64p41F7zlBQw43noQIRBhx\n2RTySm8nwOiN29jxGGakDJqKSY4xhOIZdtjgqaDciomoL1aqyMO2NW3Iwj0x\nxtMHd/ciSSq+mmitumuphHIhz3bY/Il7d0f6ffENKmWbyRP3a/U6TMibz5jR\nqP/Gdg3AlUebaHdwOcMu0nEOAK4vCmfMA0JEqY40dlWYwLKY3R5AfcprlMPE\nqtok3RQSc3mEcgMyq1jRgvIlOPKJV/GmR3lC1c59Wv8MSvc42zuNPMZZADFM\nA5ipDKCWuQpW7gfuLc+/QrBNQ9+1Z5WIC6ctuFfGA6ShNZr4eZgWKRIU/5/y\nTrOvHr3htOvLkD++14nMDFc3D4QS11Bg2u8MTN3ONuxaUoAEcBr52p2HexwT\nU1IB\r\n=jq0v\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sbot-conversation_1.4.0_1530944942680_0.791749661358494"},"_hasShrinkwrap":false},"1.5.0":{"name":"sbot-conversation","version":"1.5.0","description":"A conversation implement for hubot","main":"./lib","scripts":{"lint":"eslint .","lint:fix":"eslint . --fix","test":"mocha --require babel-register --check-leaks --bail --exit","test:cov":"nyc --reporter=html --reporter=text mocha --require babel-register --check-leaks --bail --exit","test:ci":"nyc --reporter=html --reporter=text-lcov > coverage.lcov mocha --require babel-register --check-leaks --bail --exit","build:doc":"./docs.sh"},"repository":{"type":"git","url":"git+https://github.com/sactive/sbot-conversation.git"},"keywords":["hubot","conversation","session","chatops","chatbot","bot"],"author":{"name":"Pooky"},"license":"MIT","bugs":{"url":"https://github.com/sactive/sbot-conversation/issues"},"homepage":"https://github.com/sactive/sbot-conversation#readme","dependencies":{"async-series":"0.0.1","extend":"^3.0.1","jsonschema":"^1.2.4","lodash":"^4.17.10","moment":"^2.22.2"},"devDependencies":{"babel-register":"^6.26.0","chai":"^4.1.2","coffee-script":"^1.12.7","eslint":"^4.19.1","eslint-config-sactive":"^2.0.0","eslint-config-standard":"^11.0.0","eslint-plugin-import":"^2.12.0","eslint-plugin-node":"^6.0.1","eslint-plugin-promise":"^3.8.0","eslint-plugin-standard":"^3.1.0","hubot":"^2.19.0","hubot-test-helper":"1.5.0","jsdoc-to-markdown":"^4.0.1","mocha":"^5.2.0","nyc":"^12.0.2"},"gitHead":"8a01a11f6a9416f5d55d553c33af6f545db03468","_id":"sbot-conversation@1.5.0","_npmVersion":"6.1.0","_nodeVersion":"8.9.1","_npmUser":{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"},"dist":{"integrity":"sha512-nYwXegCJME6A5Ack89a0RNzLktluykde2wgVkwUecrx+HuvppKOGM/qOsAa+JPkrbWK/CI/39OhdNO6E2xKUOg==","shasum":"bc141b42e2e9386c7be512a7531921e7b20afe31","tarball":"https://registry.npmjs.org/sbot-conversation/-/sbot-conversation-1.5.0.tgz","fileCount":29,"unpackedSize":87240,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbTVQVCRA9TVsSAnZWagAAomgP/1ePW+9RwS91b31Gw8fD\n6lD0P6orpO2A5gL9sYM2QuD1nNlkBTMNPGOaxUwY+NWcgOUwPI41GXSdtIuE\niaZ7ioybt2ld48N0cRgy341ZQMFuGFWLUKQPQES8i/w0hHzueXa99JEhVf7t\nK1hZYVW3d7HxDJdiDozAfn9DPyhTIhbYW+nDT9KeGxKN5tEXsuk5PDvceyO2\nV7kz0Prtdc6BQOwWo9TAsGdO4G+DFJMxrqANpFEDwsHJVnB+QRmTV4O5IyiO\nDqo/CscU7/qVDmhb2Eac22qzZs9LY0Vh/vKXAaIkQMnbStzYeyhWW3qh+59J\n+XSNt6mfCKdEtmUQaJdIHRMbiMrc4AUFxrhl8g5nCqwvGz+YzakMuDNsX40b\nzWWI/WxFKbVxhYOaSow40SrLvQYcYTjsm6EE+SuAf+Hse7fQsmBsBTeMxja8\nNCMx98SaKNjVg1mVrVyfYt/JxG8kvu42XDodkhrpc4ETmGJndJj2sh7S2FJ7\naZHi+sqJ9tzND1BWAL8wHmwzrLv56NdUYSILC369gwHv1f/14mV1gbEwBRx6\n7Yue6V6ba+5druXwPz4D5JiV94qUK8jN7nDUZAfwc73x3uz/2K0KVYDQYbiu\nHiNEp1hxWhWlS6KfcKVyMLnu2lOo/ExdDrufMshYJS8eY8MgigNZoKDm+ioR\nmdO7\r\n=QA7i\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sbot-conversation_1.5.0_1531794453650_0.31442277529539964"},"_hasShrinkwrap":false}},"time":{"created":"2018-07-04T13:47:46.306Z","1.0.0":"2018-07-04T13:47:46.476Z","modified":"2018-07-17T02:27:36.720Z","1.1.0":"2018-07-05T03:32:38.342Z","1.2.0":"2018-07-05T08:55:26.459Z","1.3.0":"2018-07-06T02:07:03.827Z","1.3.1":"2018-07-06T05:56:24.366Z","1.4.0":"2018-07-07T06:29:02.792Z","1.5.0":"2018-07-17T02:27:33.705Z"},"maintainers":[{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"}],"description":"A conversation implement for hubot","homepage":"https://github.com/sactive/sbot-conversation#readme","keywords":["hubot","conversation","session","chatops","chatbot","bot"],"repository":{"type":"git","url":"git+https://github.com/sactive/sbot-conversation.git"},"author":{"name":"Pooky"},"bugs":{"url":"https://github.com/sactive/sbot-conversation/issues"},"license":"MIT","readme":"# sbot-conversation\r\nA conversation implement for [hubot](https://github.com/hubotio/hubot).\r\n\r\n[![Build status][travis-image]][travis-url]\r\n[![Coverage][cov-image]][cov-url]\r\n[![NPM version][npm-image]][npm-url]\r\n[![License][license-image]][license-url]\r\n\r\n[![NPM](https://nodei.co/npm/sbot-conversation.png?downloads=true)](https://nodei.co/npm/sbot-conversation/)\r\n\r\n## Features\r\n\r\n- Conversation for hubot\r\n- Conversation manager\r\n\r\n## Installation\r\n```bash\r\nnpm install sbot-conversation\r\n```\r\n\r\n## Example\r\n```javascript\r\nconst {initManager} = require('sbot-conversation');\r\nconst DYNAMIC_SCHEMA_MOCK = {\r\n  onCompleteMessage: 'Create user successfully!! Thanks for reporting this.',\r\n  type: 'dynamic',\r\n  steps: [\r\n    {\r\n      question: 'Start create a user \\nPlease enter your user name.',\r\n      answer: {\r\n        type: 'text',\r\n        validation: {\r\n          'description': 'full name',\r\n          'type': 'string',\r\n          'minLength': 8\r\n        }\r\n      },\r\n      required: true\r\n    },\r\n    {\r\n      question: 'Please enter your user email.',\r\n      answer: {\r\n        type: 'text',\r\n        validation: {\r\n          'description': 'email address',\r\n          'type': 'string',\r\n          'format': 'email',\r\n          'maxLength': 64\r\n        }\r\n      },\r\n      required: true\r\n    },\r\n    {\r\n      question: 'Please enter gender enum[female, male, unspecified]',\r\n      answer: {\r\n        type: 'choice',\r\n        options: [\r\n          {\r\n            match: 'unspecified'\r\n          },\r\n          {\r\n            match: 'male'\r\n          },\r\n          {\r\n            match: 'female'\r\n          }\r\n        ]\r\n      },\r\n      required: false\r\n    }\r\n  ]\r\n};\r\n\r\nconst JSON_SCHEMA_MOCK = {\r\n  'type': 'object',\r\n  'required': [\r\n    'name'\r\n  ],\r\n  'properties': {\r\n    'name': {\r\n      'description': 'full name',\r\n      'type': 'string',\r\n      'minLength': 8\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = function(robot) {\r\n  let switchBoard = initManager(robot);\r\n  robot.respond(/dynamic create user/i, msg => {\r\n    let schema = switchBoard.initSchema('User', DYNAMIC_SCHEMA_MOCK);\r\n    switchBoard.start(msg, 'dynamic create user', schema);\r\n  });\r\n\r\n  robot.respond(/create user/i, msg => {\r\n    let schema = switchBoard.initSchema('User', JSON_SCHEMA_MOCK);\r\n    switchBoard.start(msg, 'create user', schema);\r\n  });\r\n};\r\n```\r\n\r\n## Usage\r\n\r\n### Create a conversation manager instance\r\n\r\n```javascript\r\ninitManager(robot, type, callback, singleton)\r\n```\r\nReturn a conversation manager instance.(singleton is recommended).\r\n\r\n- **robot:** `Hubot.Robot`\r\n- **type:** (optional) 'user' or 'room', default 'user'.It defines if this conversation is with the whole room or with a particular user only.\r\nIf the message comes from a user (or a room) that we're having a conversation with, it will be processed as the next step in an ongoing Dialog.\r\n- **callback:** (optional) The callback should be return a `Boolean`, when the return value is `true` and there is a active conversation of the user (or the room),\r\nit will be processed as the next step in an ongoing Dialog.\r\n- **singleton:** `Boolean`,(optional) default `true`. Enable the singleton.\r\n\r\n**Example**\r\n```javascript\r\nlet switchBoard = initManager(robot, 'room', function(msg) {\r\n  let reg = new RegExp(`^@hubot (show conversation|cancel conversation|resume conversation)(.*)`, 'i');\r\n  if (reg.test(msg.text)) {\r\n    return false;\r\n  }\r\n  return true;\r\n});\r\n```\r\n\r\n### Create a conversation\r\n\r\nThere are there patterns to create a conversation.\r\n\r\n#### First pattern: Init a json schema\r\n\r\n**Example**\r\n```javascript\r\nconst JSON_SCHEMA_MOCK = {\r\n  'type': 'object',\r\n  'required': [\r\n    'name',\r\n    'email'\r\n  ],\r\n  'properties': {\r\n    'name': {\r\n      'description': 'full name',\r\n      'type': 'string',\r\n      'minLength': 8\r\n    },\r\n    'email': {\r\n      'description': 'email address',\r\n      'type': 'string',\r\n      'format': 'email',\r\n      'maxLength': 64\r\n    },\r\n    'employeeNum': {\r\n      'description': 'employee Number',\r\n      'type': 'integer',\r\n      'minimum': 100,\r\n      'maximum': 600\r\n    },\r\n    'gender': {\r\n      'description': 'gender',\r\n      'type': 'enum',\r\n      'default': 'unspecified',\r\n      'enum': [\r\n        'unspecified',\r\n        'male',\r\n        'female'\r\n      ]\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = function(robot) {\r\n  let switchBoard = initManager(robot);\r\n  robot.respond(/create user/i, msg => {\r\n    let schema = switchBoard.initSchema('User', JSON_SCHEMA_MOCK);\r\n    switchBoard.start(msg, 'create user', schema);\r\n  });\r\n};\r\n```\r\n\r\nHow to define a json schema, please refer[JSON Schema](http://json-schema.org/)\r\n**`type` is required and must be a string 'object'.**\r\n\r\n#### Second pattern: Init a dynamic message model\r\n\r\n**Example**\r\n```javascript\r\nconst DYNAMIC_SCHEMA_MOCK = {\r\n  onCompleteMessage: 'Create user successfully!! Thanks for reporting this.',\r\n  type: 'dynamic',\r\n  steps: [\r\n    {\r\n      question: 'Start create a user \\nPlease enter your user name.',\r\n      answer: {\r\n        type: 'text',\r\n        validation: {\r\n          'description': 'full name',\r\n          'type': 'string',\r\n          'minLength': 8\r\n        }\r\n      },\r\n      required: true\r\n    },\r\n    {\r\n      question: 'Please enter your user email.',\r\n      answer: {\r\n        type: 'text',\r\n        validation: {\r\n          'description': 'email address',\r\n          'type': 'string',\r\n          'format': 'email',\r\n          'maxLength': 64\r\n        }\r\n      },\r\n      required: true\r\n    },\r\n    {\r\n      question: 'Please enter employee Num.',\r\n      answer: {\r\n        type: 'text',\r\n        validation: {\r\n          'description': 'employee Number',\r\n          'type': 'integer',\r\n          'minimum': 100,\r\n          'maximum': 600\r\n        }\r\n      },\r\n      required: false\r\n    },\r\n    {\r\n      question: 'Please enter gender enum[female, male, unspecified]',\r\n      answer: {\r\n        type: 'choice',\r\n        options: [\r\n          {\r\n            match: 'unspecified'\r\n          },\r\n          {\r\n            match: 'male'\r\n          },\r\n          {\r\n            match: 'female'\r\n          }\r\n        ]\r\n      },\r\n      required: false\r\n    }\r\n  ]\r\n};\r\n\r\nmodule.exports = function(robot) {\r\n  let switchBoard = initManager(robot);\r\n  robot.respond(/dynamic create user/i, msg => {\r\n    let schema = switchBoard.initSchema('User', DYNAMIC_SCHEMA_MOCK);\r\n    switchBoard.start(msg, 'dynamic create user', schema);\r\n  });\r\n};\r\n```\r\nHow to define a dynamic message model:\r\n- **onCompleteMessage:** `String` // reply sent to the user when the conversation is done (optional)\r\n- **skipKeyword:** `String` // default 'skip', a keyword that can be used to skip non-required questions (optional)\r\n- **skipMessage:** `String` // a message that can be appended to any non-required questions (optional)\r\n- **type:** \"dynamic\" // conversation schema type must be 'dynamic' (required)\r\n- **steps:** `Array`, define properties.\r\n```javascript\r\nsteps: [\r\n    {\r\n      question: String // question to ask the user (required)\r\n      answer: {\r\n        type: String // could be 'choice', 'text' (required)\r\n        options: [ // add the options object if the `type` of answer is `choice`\r\n          {\r\n            match: String, // what robot should listen to - can be a regex\r\n            validation: Object // validate input, refer json shcema (optional)\r\n          }\r\n        ]\r\n      },\r\n      required: Boolean\r\n    }\r\n  ]\r\n```\r\n\r\n#### Third pattern: custom\r\n\r\n**Example**\r\n```javascript\r\nlet conversation = switchBoard.start(msg, 'create user(custom)')\r\n\r\nconst function1 = (message) => {\r\n  conversation.updateAnswers('yes')\r\n  message.reply('Please enter your user name.')\r\n  conversation.updateQuestion('Please enter your user name.')\r\n  conversation.addChoice(/.*/i, function2)\r\n}\r\n\r\nconst function2 = (message) => {\r\n  conversation.updateAnswers(message.message.text)\r\n  message.reply(\"Please enter your user email.\")\r\n  conversation.updateQuestion(\"Please enter your user email.\")\r\n  conversation.addChoice(/.*/i, function3)\r\n}\r\n\r\nconst function3 = (message) => {\r\n  conversation.updateAnswers(message.message.text)\r\n  message.reply(\"Please enter employee Num.\")\r\n  conversation.updateQuestion(\"Please enter employee Num.\")\r\n  conversation.addChoice(/.*/i, function4)\r\n}\r\n\r\nconst function4 = (message) => {\r\n  conversation.updateAnswers(message.message.text)\r\n  message.reply('Create user successfully!! Thanks for reporting this.')\r\n  conversation.close();\r\n}\r\n\r\nconst function5 =  (message) => {\r\n  conversation.close();\r\n  message.reply('Bye bye!')\r\n}\r\n\r\nmsg.reply(\"Start create a user \\n [yes]or [no]?\")\r\nconversation.updateQuestion(\"Start create a user \\n [yes]or [no]?\")\r\nconversation.addChoice(/yes/i, function1)\r\nconversation.addChoice(/no/i, function5)\r\n\r\n```\r\n\r\n### robot.receiveMiddleware integration\r\n**Example**\r\n```javascript\r\nconst _ = require('lodash');\r\nconst {Dialog} = require('sbot-conversation');\r\n\r\nmodule.exports = function conversationMiddleware(customListener) {\r\n  if (!_.isFunction(customListener)) {\r\n    customListener = () => true;\r\n  }\r\n\r\n  return function(context, next, done) {\r\n    let msg = context.response;\r\n    let robot = msg.robot;\r\n\r\n    robot.logger.debug('Conversation middleware processing: ', msg.message.text);\r\n\r\n    let dialog = new Dialog(robot);\r\n    if (!customListener(msg.message)) {\r\n      return next();\r\n    }\r\n    let existsConversation = dialog.existsConversation(msg.message);\r\n    if (existsConversation) {\r\n      let receiverUserId = dialog.getId(msg.message);\r\n      let conversation = dialog.getCurrentConversation(receiverUserId);\r\n      conversation.receiveMessage(msg);\r\n    }\r\n    return next();\r\n  };\r\n};\r\n\r\n\r\n//call the robot.receiveMiddleware method to register a conversationMiddleware in your script\r\nrobot.receiveMiddleware(conversationMiddleware(customListener));\r\n```\r\n\r\n### Conversation manage\r\n**Example**\r\n```javascript\r\nmodule.exports = function(robot) {\r\n  let switchBoard = initManager(robot);\r\n  let existsConversation = switchBoard.existsConversation(msg.message);\r\n  if (!existsConversation) {\r\n    return msg.send(`@${msg.message.user.name} There is no active conversation.`);\r\n  }\r\n  let userId = switchBoard.getId(msg.message);\r\n  let currentConversation = switchBoard.getCurrentConversation(userId);\r\n  let conversations = switchBoard.getConversations(userId);\r\n};\r\n```\r\n\r\n**[More Conversation manage Examples](https://github.com/sactive/sbot-conversation/wiki/Example).**\r\n\r\n## API\r\n\r\n- [API documentation](https://github.com/sactive/sbot-conversation/wiki/API)\r\n\r\n### Conversation Manager API\r\n#### initManager()\r\n```javascript\r\ninitManager(robot, type, callback, singleton)\r\n```\r\nReturn a conversation manager instance.(singleton is recommended).\r\n\r\n- **robot:** `Hubot.Robot`\r\n- **type:** (optional) 'user' or 'room', default 'user'.It defines if this conversation is with the whole room or with a particular user only.\r\nIf the message comes from a user (or a room) that we're having a conversation with, it will be processed as the next step in an ongoing Dialog.\r\n- **callback:** (optional) The callback should be return a `Boolean`, when the return value is `true` and there is a active conversation of the user (or the room),\r\nit will be processed as the next step in an ongoing Dialog.\r\n- **singleton:** `Boolean`,(optional) default `true`. Enable the singleton.\r\n\r\n#### initSchema()\r\n```javascript\r\ninitSchema(schemaName , schema)\r\n```\r\nReturns a new conversation schema object.\r\n\r\n- **schemaName:** instance of hubot's Robot.\r\n- **schema:** json schema or dynamic message model.\r\n\r\n**`initSchema` used for `json schema pattern` or `dynamic message model pattern` only.**\r\n\r\n#### start()\r\n```javascript\r\nstart(msg, conversationName, schema, expireTime)\r\n```\r\nReturns a new conversation object, with a default expire time 1m.\r\n\r\n- **msg:** An incoming message heard / responded to by the robot. eg:\r\n```javascript\r\nrobot.respond(/foo/, function(msg){\r\n    let schema = switchBoard.initSchema('User', DYNAMIC_SCHEMA_MOCK);\r\n    switchBoard.start(msg, 'dynamic create user', schema);\r\n})\r\n```\r\n- **conversationName:** conversation name.\r\n- **schema:** schema object (optional), used for `json schema pattern` or `dynamic message model pattern` only.\r\n- **expireTime:** `Number`, (optional) expire time (ms).\r\n```javascript\r\nrobot.respond(/foo/, function(msg){\r\n    switchBoard.start(msg, 'dynamic create user', null, 120 * 1000);\r\n})\r\n```\r\n\r\n**[More Conversation Manager API](https://github.com/sactive/sbot-conversation/wiki/API#Dialog).**\r\n\r\n### Conversation API\r\n\r\n**Conversation is an instance of an EventEmitter, It will emit an `end` event with `conversation.allAnswers` when the flow is done.**\r\n**It has two other events `expire` and `close`.**\r\n\r\n```javascript\r\nconversation.on('end', allAnswers => {\r\n  this.robot.logger.info(`Conversation: ${conversation.id} end`);\r\n  this.robot.logger.debug(allAnswers);\r\n});\r\n```\r\n\r\n#### addChoice()\r\n```javascript\r\naddChoice(regex, handler)\r\n```\r\nAdds a listener choice to this Dialog. If a message is received that matches the choice regex, the handler will be executed.\r\n**only for custom pattern.**\r\n\r\n- **regex:** a regular expresion that will be aplied to the incoming message from the receive function\r\n- **handler:** function(message), A function that is executed against a successfully matched message. The match property of the original\r\n\r\n\r\n#### updateQuestion()\r\n```javascript\r\nupdateQuestion(value)\r\n```\r\nUpdate last question.\r\n**only for custom pattern.**\r\n\r\n- **value:** `String` - question\r\n\r\n#### updateAnswers()\r\n```javascript\r\nupdateAnswers(value)\r\n```\r\nUpdate all answers.\r\n**only for custom pattern.**\r\n\r\n- **value:** `String` - answer\r\n\r\n#### close()\r\n```javascript\r\nclose()\r\n```\r\nEmit an close event with all all answers, and close the current conversation.\r\n**only for custom pattern.**\r\n\r\n[npm-image]: https://img.shields.io/npm/v/sbot-conversation.svg\r\n[npm-url]: https://www.npmjs.com/package/sbot-conversation\r\n[travis-image]: https://travis-ci.org/sactive/sbot-conversation.svg?branch=master\r\n[travis-url]: https://www.travis-ci.org/sactive/sbot-conversation\r\n[cov-image]: https://codecov.io/gh/sactive/sbot-conversation/branch/master/graph/badge.svg\r\n[cov-url]: https://codecov.io/gh/sactive/sbot-conversation\r\n[license-image]: http://img.shields.io/npm/l/sbot-conversation.svg\r\n[license-url]: ./LICENSE\r\n\r\n","readmeFilename":"README.md"}
