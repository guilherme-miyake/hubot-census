{"_id":"sbot-conversation","_rev":"1-808075580df8b09f8542d74939778e03","name":"sbot-conversation","dist-tags":{"latest":"1.0.0"},"versions":{"1.0.0":{"name":"sbot-conversation","version":"1.0.0","description":"A conversation session implement for hubot","main":"./lib","scripts":{"lint":"eslint .","lint:fix":"eslint . --fix","test":"mocha --require babel-register --check-leaks --bail --exit","test:cov":"nyc --reporter=html --reporter=text mocha --require babel-register --check-leaks --bail --exit","test:ci":"nyc --reporter=html --reporter=text-lcov > coverage.lcov mocha --require babel-register --check-leaks --bail --exit","build:doc":"./docs.sh"},"repository":{"type":"git","url":"git+https://github.com/sactive/sbot-conversation.git"},"keywords":["hubot","conversation","session"],"author":{"name":"Pooky"},"license":"MIT","bugs":{"url":"https://github.com/sactive/sbot-conversation/issues"},"homepage":"https://github.com/sactive/sbot-conversation#readme","dependencies":{"async-series":"0.0.1","extend":"^3.0.1","jsonschema":"^1.2.4","lodash":"^4.17.10","moment":"^2.22.2"},"devDependencies":{"babel-register":"^6.26.0","chai":"^4.1.2","coffee-script":"^1.12.7","eslint":"^4.19.1","eslint-config-sactive":"^2.0.0","eslint-config-standard":"^11.0.0","eslint-plugin-import":"^2.12.0","eslint-plugin-node":"^6.0.1","eslint-plugin-promise":"^3.8.0","eslint-plugin-standard":"^3.1.0","hubot":"^2.19.0","hubot-test-helper":"1.5.0","jsdoc-to-markdown":"^4.0.1","mocha":"^5.2.0","nyc":"^12.0.2"},"gitHead":"3a4640cb3bc9bf5ed18165a8687e8c853669d6d7","_id":"sbot-conversation@1.0.0","_npmVersion":"5.6.0","_nodeVersion":"8.9.4","_npmUser":{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"},"dist":{"integrity":"sha512-YmqYETYw3kxNab/BaugWmBr7KT+IqbFqJzTgmNLnYApFFusGYGw9MGeAvqSxfSH9nzuQ5XrQxul3OVgjEZUqCg==","shasum":"e6099c78f9c6270e3f5d94ab8652765f6a82f580","tarball":"https://registry.npmjs.org/sbot-conversation/-/sbot-conversation-1.0.0.tgz","fileCount":26,"unpackedSize":77744,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbPNACCRA9TVsSAnZWagAAg0kP/2XvfpSiR23lb2rBPwdc\nOzlcNFZg8KIyos31k0y+mJm2+W3ijO0Qfn8SwL8Nqh0H5NdVhKQPatyTpwFW\n2wQDI5jPLTVpUXqeJ7PTYDcsBtdzcp3vKBOd2qHa22gMLjtQlcAEco6Z2VHB\nKr1x1NemDgmotbFGA35/PoRBjmLVg3vsKV9hKHgH9BAS56qP6XtvD43mIb4N\nHmJ6ArJzqHUE7ua7HB5Yh+apmMHXDUnLFeZiBDljsIKM3xDL39kfjTTr39Q9\n/gr95TizrfLMqobnn8rspI6BZNyiD7ADbjXtYmJPF9i07Zpo2iHiTtgr9ypY\nAr3JsEhw2NMj72OPL/cWC2K2bRlsyig1yl6MveQTBKHSrr5omCc3WeR91/Qy\nI8Mupr/Z1xjOEdlIbwwYL3YPMc144IqMa8/QPxEQ+XOpJ8IqqoZFo/8NOE48\n64431kY/8HIQfqSVSnirpbLTnqaJMPSQpDxpapqR07lCEKOhSnHTAjMHTlhm\nLo7cv1WQpR5ta/xRltwiKoyVM0GmidsPolEKZZaTezLCizZrZiea0TTkHYL7\n+r8Ud9w7GQKB8cVpgqEFPCzka1zviSV3RXxuYEm+hg0FBjMZgZMAyIIkFS8r\n34VG/wDjSt+aX+9mikA1BFlx9lYdLpdtaa9ckGGqAQPRkA8Hz+vxZ5X0OIQH\n3Sxo\r\n=kttp\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/sbot-conversation_1.0.0_1530712066307_0.6944619533284946"},"_hasShrinkwrap":false}},"time":{"created":"2018-07-04T13:47:46.306Z","1.0.0":"2018-07-04T13:47:46.476Z","modified":"2018-07-04T13:47:49.730Z"},"maintainers":[{"name":"shipengqi","email":"pooky.shipengqi@gmail.com"}],"description":"A conversation session implement for hubot","homepage":"https://github.com/sactive/sbot-conversation#readme","keywords":["hubot","conversation","session"],"repository":{"type":"git","url":"git+https://github.com/sactive/sbot-conversation.git"},"author":{"name":"Pooky"},"bugs":{"url":"https://github.com/sactive/sbot-conversation/issues"},"license":"MIT","readme":"# sbot-conversation\r\nA conversation implement for [hubot](https://github.com/hubotio/hubot).\r\n\r\n[![Build status][travis-image]][travis-url]\r\n[![Coverage][cov-image]][cov-url]\r\n[![NPM version][npm-image]][npm-url]\r\n[![License][license-image]][license-url]\r\n\r\n[![NPM](https://nodei.co/npm/sbot-conversation.png?downloads=true)](https://nodei.co/npm/sbot-conversation/)\r\n\r\n## Features\r\n\r\n- conversation\r\n- conversation manager\r\n\r\n## Installation\r\n```bash\r\nnpm install sbot-conversation\r\n```\r\n\r\n## Example\r\n```javascript\r\nconst {initManager} = require('sbot-conversation');\r\nconst DYNAMIC_SCHEMA_MOCK = {\r\n  onCompleteMessage: 'Create user successfully!! Thanks for reporting this.',\r\n  type: 'dynamic',\r\n  steps: [\r\n    {\r\n      question: 'Start create a user \\nPlease enter your user name.',\r\n      answer: {\r\n        type: 'text',\r\n        validation: {\r\n          'description': 'full name',\r\n          'type': 'string',\r\n          'minLength': 8\r\n        }\r\n      },\r\n      required: true\r\n    },\r\n    {\r\n      question: 'Please enter your user email.',\r\n      answer: {\r\n        type: 'text',\r\n        validation: {\r\n          'description': 'email address',\r\n          'type': 'string',\r\n          'format': 'email',\r\n          'maxLength': 64\r\n        }\r\n      },\r\n      required: true\r\n    },\r\n    {\r\n      question: 'Please enter gender enum[female, male, unspecified]',\r\n      answer: {\r\n        type: 'choice',\r\n        options: [\r\n          {\r\n            match: 'unspecified'\r\n          },\r\n          {\r\n            match: 'male'\r\n          },\r\n          {\r\n            match: 'female'\r\n          }\r\n        ]\r\n      },\r\n      required: false\r\n    }\r\n  ]\r\n};\r\n\r\nconst JSON_SCHEMA_MOCK = {\r\n  'type': 'object',\r\n  'required': [\r\n    'name'\r\n  ],\r\n  'properties': {\r\n    'name': {\r\n      'description': 'full name',\r\n      'type': 'string',\r\n      'minLength': 8\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = function(robot) {\r\n  let switchBoard = initManager(robot);\r\n  robot.respond(/dynamic create user/i, msg => {\r\n    let schema = switchBoard.initSchema('User', DYNAMIC_SCHEMA_MOCK);\r\n    switchBoard.start(msg, 'dynamic create user', schema);\r\n  });\r\n\r\n  robot.respond(/create user/i, msg => {\r\n    let schema = switchBoard.initSchema('User', JSON_SCHEMA_MOCK);\r\n    switchBoard.start(msg, 'create user', schema);\r\n  });\r\n};\r\n```\r\n\r\n## Usage\r\n\r\n### Create a conversation manager instance\r\n\r\n### Create a conversation\r\n\r\nThere are there pattern to create a conversation.\r\n\r\n#### First pattern: Init a json schema\r\n\r\n```javascript\r\n//json schema example\r\n\r\n  userSchema = {\r\n    \"type\": 'object',\r\n    \"required\": [\r\n      'name'\r\n      'email'\r\n    ],\r\n    \"properties\":{\r\n      \"name\": {\r\n        \"description\": 'full name',\r\n        \"type\": 'string',\r\n        \"minLength\": 8\r\n      },\r\n      \"email\": {\r\n        \"description\": 'email address',\r\n        \"type\": 'string',\r\n        \"format\": 'email',\r\n        \"maxLength\": 64\r\n      },\r\n      \"employeeNum\": {\r\n        \"description\": 'employee Number',\r\n        \"type\": 'integer',\r\n        \"minimum\": 100,\r\n        \"maximum\": 600\r\n      },\r\n      \"gender\": {\r\n        \"description\": 'gender',\r\n        \"type\": 'enum',\r\n        \"default\": 'unspecified',\r\n        \"enum\": [\r\n          'unspecified'\r\n          'male'\r\n          'female'\r\n        ]\r\n      }\r\n    }\r\n  }\r\n\r\n  schema = switchBoard.initSchema('User', userSchema)\r\n  switchBoard.startDialog(msg, 'create user', schema)\r\n```\r\n\r\n#### Second pattern: Init a message model\r\n```javascript\r\n// message model example\r\n\r\n  onCompleteMessage: String // reply sent to the user when the conversation is done (optional)\r\n  skipKeyword: String // default 'skip', a keyword that can be used to skip non-required questions (optional)\r\n  skipMessage: String // a message that can be appended to any non-required questions (optional)\r\n  type: \"dynamic\" // conversation schema type cloud be 'dynamic' (required)\r\n  steps: [\r\n    {\r\n      question: String // question to ask the user (required)\r\n      answer: {\r\n        type: String // could be 'choice', 'text' (required)\r\n        options: [ // add the options object if the `type` of answer is `choice`\r\n          {\r\n            match: String, // what robot should listen to - can be a regex\r\n            validation: Object // validate input, refer json shcema (optional)\r\n          }\r\n        ]\r\n      },\r\n      required: Boolean\r\n    }\r\n  ]\r\n\r\n  dynamicSchema = {\r\n    onCompleteMessage: 'Create user successfully!! Thanks for reporting this.',\r\n    type: \"dynamic\",\r\n    steps: [\r\n      {\r\n        question: \"Start create a user \\nPlease enter your user name.\",\r\n        answer: {\r\n          type: \"text\",\r\n          validation:{\r\n            \"description\": 'full name',\r\n            \"type\": 'string',\r\n            \"minLength\": 8\r\n          }\r\n        },\r\n        required: true\r\n      },\r\n      {\r\n        question: \"Please enter your user email.\",\r\n        answer: {\r\n          type: \"text\",\r\n          validation:{\r\n            \"description\": 'email address',\r\n            \"type\": 'string',\r\n            \"format\": 'email',\r\n            \"maxLength\": 64\r\n          }\r\n        },\r\n        required: true\r\n      },\r\n      {\r\n        question: \"Please enter employee Num.\",\r\n        answer: {\r\n          type: \"text\",\r\n          validation:{\r\n            \"description\": 'employee Number',\r\n            \"type\": 'integer',\r\n            \"minimum\": 100,\r\n            \"maximum\": 600\r\n          }\r\n        },\r\n        required: false\r\n      },\r\n      {\r\n        question: \"Please enter gender enum[female, male, unspecified]\"\r\n        answer: {\r\n          type: \"choice\",\r\n          options: [\r\n            {\r\n              match: \"unspecified\"\r\n            },\r\n            {\r\n              match: \"male\"\r\n            },\r\n            {\r\n              match: \"female\"\r\n            }\r\n          ]\r\n        },\r\n        required: false\r\n      }\r\n    ]\r\n  }\r\n\r\n  schema = switchBoard.initSchema('User', dynamicSchema)\r\n  switchBoard.startDialog(msg, 'create user(dynamic)', schema)\r\n\r\n```\r\n\r\n#### Third pattern: custom\r\n```coffee\r\n//example\r\n\r\n    conversation = switchBoard.startDialog(msg, 'create user(custom)')\r\n\r\n    function1 = (message) ->\r\n      conversation.updateAnswers('yes')\r\n      message.reply('Please enter your user name.')\r\n      conversation.updateQuestion('Please enter your user name.')\r\n      conversation.addChoice(/.*/i, function2)\r\n\r\n    function2 = (message) ->\r\n      conversation.updateAnswers(message.message.text)\r\n      message.reply(\"Please enter your user email.\")\r\n      conversation.updateQuestion(\"Please enter your user email.\")\r\n      conversation.addChoice(/.*/i, function3)\r\n\r\n    function3 = (message) ->\r\n      conversation.updateAnswers(message.message.text)\r\n      message.reply(\"Please enter employee Num.\")\r\n      conversation.updateQuestion(\"Please enter employee Num.\")\r\n      conversation.addChoice(/.*/i, function4)\r\n\r\n    function4 = (message) ->\r\n      conversation.updateAnswers(message.message.text)\r\n      message.reply('Create user successfully!! Thanks for reporting this.')\r\n      conversation.emit 'end'\r\n\r\n    function5 =  (message) ->\r\n      conversation.emit 'end'\r\n      message.reply('Bye bye!')\r\n\r\n    msg.reply(\"Start create a user \\n [yes]or [no]?\")\r\n    conversation.updateQuestion(\"Start create a user \\n [yes]or [no]?\")\r\n    conversation.addChoice(/yes/i, function1)\r\n    conversation.addChoice(/no/i, function5)\r\n\r\n```\r\n\r\n## API\r\n\r\n- [API documentation](https://github.com/sactive/sbot-conversation/wiki/API)\r\n\r\n[npm-image]: https://img.shields.io/npm/v/sbot-conversation.svg\r\n[npm-url]: https://www.npmjs.com/package/sbot-conversation\r\n[travis-image]: https://travis-ci.org/sactive/sbot-conversation.svg?branch=master\r\n[travis-url]: https://www.travis-ci.org/sactive/sbot-conversation\r\n[cov-image]: https://codecov.io/gh/sactive/sbot-conversation/branch/master/graph/badge.svg\r\n[cov-url]: https://codecov.io/gh/sactive/sbot-conversation\r\n[license-image]: http://img.shields.io/npm/l/sbot-conversation.svg\r\n[license-url]: ./LICENSE\r\n\r\n","readmeFilename":"README.md"}
