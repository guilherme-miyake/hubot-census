{"_id":"actuator","_rev":"2-285b370f0b66b6b9fde5de7e3c4052ae","name":"actuator","description":"A small utility for easily unit testing Hubot scripts.","dist-tags":{"latest":"0.0.2"},"versions":{"0.0.1":{"name":"actuator","description":"A small utility for easily unit testing Hubot scripts.","version":"0.0.1","author":{"name":"Declan de Wet","email":"declan@io.co.za"},"keywords":["unit","test","hubot","script","scripts","testing","feature","integration","functional","tests","tdd","mocha","jasmine"],"main":"lib","license":"MIT","repository":{"type":"git","url":"https://github.com/io-digital/actuator"},"bugs":{"url":"http://github.com/io-digital/actuator/issues","email":"declan@io.co.za"},"directories":{"lib":"lib"},"scripts":{"test":"mocha","build":"mv lib src && coffee -o lib -c src","unbuild":"rm -rf lib && mv src lib","release":"npm run build && npm publish . && npm run unbuild","coveralls":"npm run build && istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage && npm run unbuild"},"engines":{"node":">=0.10.0"},"dependencies":{"hubot":"^2.8.1","hubot-mock-adapter":"^1.0.0"},"devDependencies":{"chai":"^1.9.1","coffee-script":"^1.8.0","coveralls":"^2.11.1","istanbul":"^0.3.0","mocha":"^1.21.4","mocha-lcov-reporter":"0.0.1"},"gitHead":"4947c8ad8731c47845e678dd4568607b3ee069db","homepage":"https://github.com/io-digital/actuator","_id":"actuator@0.0.1","_shasum":"6feeba3c92fc46f42ca65b45c15e734d55a4d5f4","_from":".","_npmVersion":"1.4.23","_npmUser":{"name":"io-digital","email":"declan@io.co.za"},"maintainers":[{"name":"io-digital","email":"declan@io.co.za"}],"dist":{"shasum":"6feeba3c92fc46f42ca65b45c15e734d55a4d5f4","tarball":"http://registry.npmjs.org/actuator/-/actuator-0.0.1.tgz"}},"0.0.2":{"name":"actuator","description":"A small utility for easily unit testing Hubot scripts.","version":"0.0.2","author":{"name":"Declan de Wet","email":"declan@io.co.za"},"keywords":["unit","test","hubot","script","scripts","testing","feature","integration","functional","tests","tdd","mocha","jasmine"],"main":"lib","license":"MIT","repository":{"type":"git","url":"https://github.com/io-digital/actuator"},"bugs":{"url":"http://github.com/io-digital/actuator/issues","email":"declan@io.co.za"},"directories":{"lib":"lib"},"scripts":{"test":"mocha","build":"mv lib src && coffee -o lib -c src","unbuild":"rm -rf lib && mv src lib","release":"npm run build && npm publish . && npm run unbuild","coveralls":"npm run build && istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage && npm run unbuild"},"engines":{"node":">=0.10.0"},"dependencies":{"hubot":"^2.8.1","hubot-mock-adapter":"^1.0.0","when":"^3.4.5"},"devDependencies":{"chai":"^1.9.1","coffee-script":"^1.8.0","coveralls":"^2.11.1","istanbul":"^0.3.0","mocha":"^1.21.4","mocha-lcov-reporter":"0.0.1"},"gitHead":"7a1def9e9637afd519f6f4fac84e59ddbf1ba7c0","homepage":"https://github.com/io-digital/actuator","_id":"actuator@0.0.2","_shasum":"392b766be893b9c8cbf60794b4ac0d214510009f","_from":".","_npmVersion":"1.4.23","_npmUser":{"name":"io-digital","email":"declan@io.co.za"},"maintainers":[{"name":"io-digital","email":"declan@io.co.za"}],"dist":{"shasum":"392b766be893b9c8cbf60794b4ac0d214510009f","tarball":"http://registry.npmjs.org/actuator/-/actuator-0.0.2.tgz"}}},"readme":"Actuator\n========\n\n[![](http://img.shields.io/npm/v/actuator.svg?style=flat)](https://www.npmjs.org/package/actuator)\n[![](http://img.shields.io/travis/io-digital/actuator.svg?style=flat)](https://travis-ci.org/io-digital/actuator)\n[![](http://img.shields.io/david/io-digital/actuator.svg?style=flat)](https://david-dm.org/io-digital/actuator)\n[![](http://img.shields.io/david/dev/io-digital/actuator.svg?style=flat)](https://david-dm.org/io-digital/actuator#info=devDependencies)\n[![](http://img.shields.io/coveralls/io-digital/actuator.svg?style=flat)](https://coveralls.io/r/io-digital/actuator)\n\nActuator is a tiny wrapper around a mock hubot adapter that makes it easier\nto write unit tests for Hubot scripts.\n\n> **Note:** This project is in early development, and versioning is a little different.\n  [Read this](http://markup.im/#q4_cRZ1Q) for more details.\n\nInstallation\n------------\n\n```bash\n$ npm install actuator --save-dev\n```\n\n### Usage example:\n\n```coffeescript\n{expect} = require 'chai'\n\nhubot = require 'actuator'\n\nbeforeEach (done) ->\n  hubot.initiate(script: './lib/hubot_script.coffee', done)\n\nafterEach ->\n  hubot.terminate()\n\ndescribe 'test hubot script', ->\n\n  it 'should have 3 help commands', (done) ->\n    expect(hubot.robot.helpCommands()).to.have.length(3)\n    done()\n\n  it 'should parse help', (done) ->\n    hubot.on('hubot help')\n      .spread (response) ->\n        expect(response).to.equal \"\"\"\n        hubot actuator - actuator is awesome.\n        hubot help - Displays all of the help commands that hubot knows about.\n        hubot help <query> - Displays all help commands that match <query>.\n        \"\"\"\n      .done(done.bind(@, null), done)\n\n  it 'should respond to messages', (done) ->\n    hubot.on('hubot actuator')\n      .spread (response) ->\n        expect(response).to.equal 'actuator is awesome'\n      .done(done.bind(@, null), done)\n```\n\nAPI Usage\n---------\n\n### `actuator.initiate(settings, done)`\nThis starts up a Hubot instance to run all your tests against. It is required\nfor this module to work, and belongs in your test runner's `beforeEach` hook.\nIt is asynchronous, and requires `done` to be passed to it from `beforeEach`.\n`settings` is a JavaScript object with only one property at the moment: `script`.\n`settings.script` is essentially just the path to the script that you want to test.\n\ne.g.\n\n```coffeescript\nbeforeEach (done) ->\n  actuator.initiate(script: './lib/your_hubot_script.coffee', done)\n```\n\n### `actuator.terminate()`\nThis shuts down the Hubot instance and it's webserver. Calling this in your\ntest runner's `afterEach` hook is necessary in order to prevent any weird\nerrors (like the ports Hubot runs on being regarded as in use).\n\ne.g.\n\n```coffeescript\nafterEach ->\n  actuator.terminate()\n```\n\n### `actuator.robot`\nThis is a direct reference to the Hubot instance itself. Any properties\nyou might need to reference from Hubot can be found here.\n\ne.g.\n\n```coffeescript\nit 'should have 3 help commands', (done) ->\n  expect(actuator.robot.helpCommands()).to.have.length(3)\n  done()\n```\n\n### `actuator.on(command)`\nThis is where the magic happens. This method is used to listen for Hubot commands\nand assert their response. `command` is a string for the command Hubot should be\nlistening for.\n\nThis method is asynchronous and returns a promise for\nHubot's response to the command. The `responses` thenable is an array of all\nthe `msg.send` calls in Hubot's handler for that command.\n\nFor example, if your Hubot script listens for `\"hubot greet me twice\"`, like so:\n\n```coffeescript\nmodule.exports = (robot) ->\n  robot.respond /greet me twice/i, (msg) ->\n    msg.send(\"Hi there.\")\n    msg.send(\"Wassup!?\")\n```\n\n...then this is what your test would look like:\n\n```coffeescript\nit 'responds with two greetings', (done) ->\n  actuator.on('hubot greet me twice')\n    .then (responses) ->\n      expect(responses[0]).to.equal \"Hi there.\"\n      expect(responses[1]).to.equal \"Wassup!?\"\n    .then -> done()\n    .catch done\n```\n\nSince this returns a [when.js promise](https://github.com/cujojs/when)\n(which has some [excellent documentation](https://github.com/cujojs/when/blob/master/docs/api.md)),\nwe can actually make the above test simpler like so:\n\n```coffeescript\nit 'responds with two greetings', (done) ->\n  actuator.on('hubot greet me twice')\n    .spread (first_greeting, second_greeting) ->\n      expect(first_greeting).to.equal \"Hi there.\"\n      expect(second_greeting).to.equal \"Wassup!?\"\n    .done(done.bind(@, null), done)\n```\n","maintainers":[{"name":"io-digital","email":"declan@io.co.za"}],"time":{"modified":"2014-09-05T10:43:08.721Z","created":"2014-09-04T10:17:33.184Z","0.0.1":"2014-09-04T10:17:33.184Z","0.0.2":"2014-09-05T10:43:08.721Z"},"homepage":"https://github.com/io-digital/actuator","keywords":["unit","test","hubot","script","scripts","testing","feature","integration","functional","tests","tdd","mocha","jasmine"],"repository":{"type":"git","url":"https://github.com/io-digital/actuator"},"author":{"name":"Declan de Wet","email":"declan@io.co.za"},"bugs":{"url":"http://github.com/io-digital/actuator/issues","email":"declan@io.co.za"},"license":"MIT","readmeFilename":"readme.md"}
