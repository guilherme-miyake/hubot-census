{"_id":"hubular","_rev":"1-39cec862c8e98acae7b724de8e2c7c8a","name":"hubular","dist-tags":{"latest":"0.0.1"},"versions":{"0.0.1":{"name":"hubular","version":"0.0.1","author":{"name":"Leonardo Chaia","email":"lchaia@astonishinglab.com"},"description":"A framework for writing Hubot scripts. Inspired on Angular.","repository":{"type":"git","url":"https://github.com/leonardochaia/hubular.git"},"bugs":{"url":"https://github.com/leonardochaia/hubular/issues"},"homepage":"https://github.com/leonardochaia/hubular#readme","keywords":["Hubot","dependency injection","hubot-scripts"],"license":"MIT","main":"dist/index.js","module":"dist/index.es.js","types":"dist/index.d.ts","scripts":{"prepack":"yarn build","commitmsg":"commitlint -E GIT_PARAMS","lint":"tslint -p tsconfig.json","prebuild":"yarn lint","build":"rimraf dist && rollup -c rollup.config.js","build:test":"rimraf spec/dist && rollup -c rollup.config.js --environment BUILD:test","test":"yarn build:test && jasmine --reporter=\"jasmine-console-reporter\" "},"peerDependencies":{"hubot":"^3.1.1"},"dependencies":{"@types/hubot":"^2.19.2","injection-js":"^2.2.1"},"devDependencies":{"@commitlint/cli":"^7.0.0","@commitlint/config-conventional":"^7.0.1","@types/jasmine":"^2.8.8","@types/node":"^10.9.2","hubot-mock-adapter-v3":"^1.0.1","husky":"^0.14.3","jasmine":"^3.2.0","jasmine-console-reporter":"^3.1.0","reflect-metadata":"^0.1.12","rimraf":"^2.6.2","rollup":"^0.65.0","rollup-plugin-typescript2":"^0.16.1","tslint":"^5.11.0","typescript":"^3.0.1"},"engines":{"node":">=8"},"licenseText":"The MIT License (MIT)\n\nCopyright (c) 2018 Leonardo Chaia <lchaia@astonishinglab.com> (https://github.com/leonardochaia)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n","_id":"hubular@0.0.1","dist":{"shasum":"fe44b3e0d8646334f128d9631483602c4be0e7e0","tarball":"https://registry.npmjs.org/hubular/-/hubular-0.0.1.tgz","integrity":"sha512-n/8DgnSv6JQRlv2Tobfyx0v032OdgD3fi5uGBFZxIy86VVT0g71UHMsT7vgbR9jDDa/Z4KKF3xCvyPFJd8B7HA==","fileCount":18,"unpackedSize":20361,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbhpXSCRA9TVsSAnZWagAAPfAP/j67P86CYgBdXn3HJxWD\nBYX3ULUb0zhi0D7SbnZhuRCzmnDKch8+yTo72d8B98SLC2RN5wlZ+4MRB20+\npT+NOEwDYrh0ZsOcV03s7CVXJSYwAAbPBrlPEdWfEzDMZvgPdazwJva3os0F\nTTmsQc/A4xJC7WcmMsvqj1N2z4VQc+sRY6q28Ocq6/pQ+LdNnzG8moNlCtlr\nrmOTZzfrikPM1EfvrvNn5u75AlnnjVRcqLBRRFTzUQ+j8epznCOStXq5+ysR\nxvo+9lfP9yhbLKs1rx8w2kqjKtSeUYndQAUbJ1bUqSkDGxwcBo7kbOSH+CR6\nP49Q+QXcZaKBez2Yv0d2QUoeFuHXf820ZULf7/mYCG88tMwdUpR1RO/6mFfz\n8R8lFY6R1MD4hxSuablU0B8lH8vzPCPkpz7MYv4qCh2d3qB7QK6erCLBQNvd\n1Gr1q6aDSJeSiis1+DS6LgS7PzvJuVQkbl1ehFWdLEsXM83p27goChFwTOWP\n9YtlbZOQodrtR7lGKW4uJV+9mjgpIJzzzQ56rx/n6ohL3QZsz0vPRDRX0lxE\n8rcodCs5ZD7eNRvzCelw5z9wp7Q3ahEVgClkjRQqbib+tXmt+wJpe/jv6zlf\npltpDYj/cKhDPvO7tuqzEFjdM2FOHaLASlyXxEAalHwGJixL3X0AjD5VA46x\nqR+4\r\n=XRgm\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"leonardochaia","email":"lchaia@astonishinglab.com"}],"_npmUser":{"name":"leonardochaia","email":"lchaia@astonishinglab.com"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hubular_0.0.1_1535546833599_0.0061600208875665086"},"_hasShrinkwrap":false}},"time":{"created":"2018-08-29T12:47:13.598Z","0.0.1":"2018-08-29T12:47:13.788Z","modified":"2018-08-29T12:47:17.317Z"},"maintainers":[{"name":"leonardochaia","email":"lchaia@astonishinglab.com"}],"description":"A framework for writing Hubot scripts. Inspired on Angular.","homepage":"https://github.com/leonardochaia/hubular#readme","keywords":["Hubot","dependency injection","hubot-scripts"],"repository":{"type":"git","url":"https://github.com/leonardochaia/hubular.git"},"author":{"name":"Leonardo Chaia","email":"lchaia@astonishinglab.com"},"bugs":{"url":"https://github.com/leonardochaia/hubular/issues"},"license":"MIT","readme":"# Hubular\n\nA Framework for writing complex Hubot Bots.\n\nInspired on Angular. Written in Typescript.\n\n## What is it like?\n\nThis is plain Hubot:\n\n```coffee\nmodule.exports = (robot) ->\n  robot.hear /badger/i, (res) ->\n    res.send \"Badgers? BADGERS? WE DON'T NEED NO STINKIN BADGERS\"\n\n  robot.respond /open the pod bay doors/i, (res) ->\n    res.reply \"I'm afraid I can't let you do that.\"\n```\n\nThis is Hubular:\n\n```typescript\nimport { HubularModule, HubularRobot, RobotHear, RobotRespond } from 'hubular';\nimport { Response } from 'hubot';\n\n@HubularModule()\nexport class HeroesModule {\n\n    @RobotHear(/badger/)\n    protected badgers(res: Response<HubularRobot>) {\n        res.send('Badgers? BADGERS? WE DON\\'T NEED NO STINKIN BADGERS');\n    }\n\n    @RobotRespond(/open the pod bay doors/)\n    protected openThePodBayDoors(res: Response<HubularRobot>) {\n        res.send('I\\'m afraid I can\\'t let you do that.');\n    }\n}\n```\n\nOkay.. that's not so impressive..\n\n## Dependency Injection\n\nBehind the hoods, Hubular uses `injection-js` to create a flat injector, you can inject `providers`\ninto any `@HubularModule()` or `@Injectable()`.\n\nIf you are familiar with Angular, this should ring a bell:\n\n```typescript\n// door.serivce.ts\nimport { BRAIN, Injectable, Inject } from 'hubular';\nimport { Brain } from 'hubot';\n\n@Injectable()\nexport class DoorService {\n\n    constructor(\n        @Inject(BRAIN)\n        private brain: Brain) { }\n\n    public tryOpenThePodBayDoors() {\n        // TODO: Open the doors, perhaps store status in brain?\n        return true;\n    }\n}\n\n```\n\n```typescript\n// door.module.ts\nimport { HubularModule, HubularRobot, RobotHear } from 'hubular';\nimport { Response } from 'hubot';\nimport { DoorService } from './door.service';\n\n@HubularModule({\n    providers: [\n        // these will be available to all modules\n        DoorService\n    ]\n})\nexport class DoorModule {\n\n    constructor(\n        private door: DoorService,\n        // private someOtherService: FromOtherModule\n    ) { }\n\n    @RobotHear(/open the pod bay doors/)\n    protected openThePodBayDoors(res: Response<HubularRobot>) {\n        if (this.door.tryOpenThePodBayDoors()) {\n            res.send('The doors have been opened.');\n        } else {\n            res.send('I\\'m afraid I can\\'t let you do that.');\n        }\n    }\n}\n```\n\n```typescript\n// app.module.ts\nimport { HubularModule } from 'hubular';\nimport { HeroesModule } from './heroes/heroes.module';\n\n@HubularModule({\n    imports: [\n        DoorModule\n    ]\n})\nexport class AppModule {\n\n    // The AppModule is also resolved using DI\n    // although it's only purpose should be to simply import other modules\n    // constructor(private door: DoorService) { }\n}\n\n```\n\n## Creating new Hubular Projects\n\nYou can use Yeoman to scaffold a brand new Hubular App:\n\n```bash\nyarn add global generator-hubular\n```\n\n```bash\nyo hubular\n```\n\nIf everything goes fine you should have a working Hubular App.\nTest it's working with\n\n```bash\nyarn start\n```\n\n## Adding Hubular to existing Hubot\n\n1. Install Hubular in your Hubot project\n\n    ```bash\n    yarn add hubular reflect-metadata\n    yarn add --dev typescript\n    ```\n\n1. Temporary create a new Hubular project using the previous guide.\n   This will get all the latest files for you, copy into your project the `tsconfig.json` and `src/`.\n\n1. Run `tsc`\n1. Run Hubot with `--require hubular-scripts`\n\n    ```bash\n    bin/hubot --require hubular-scripts\n    ```\n\n## Hubular Directory Structure\n\n```text\n|   .gitignore\n|   external-scripts.json\n|   package.json\n|   tsconfig.json\n|   tslint.json\n|   yarn.lock\n+---bin\n|       hubot\n|       hubot.cmd\n+---hubular-scripts\n+---node_modules\n+---scripts\n|       .gitkeep\n\\---src\n    |   main.ts\n    \\---app\n        |   app.module.ts\n        \\---heroes\n                heroes.models.ts\n                heroes.module.ts\n                heroes.service.ts\n```\n\n1. `./src` contains all your Typescript source code. The contents of this folder will get\n    compiled to `./hubular-scripts`.\n1. `./scripts`: You can still use classic Hubot Scripts in Javascript or Coffescript.\n","readmeFilename":"README.md"}
