{"_id":"hubot-natural","_rev":"1-e20c962979f9c15ae8fad2cead43f4f4","name":"hubot-natural","dist-tags":{"latest":"0.1.0"},"versions":{"0.1.0":{"name":"hubot-natural","version":"0.1.0","author":{"name":"Rocket.Chat","url":"https://rocket.chat/"},"contributors":[{"name":"Diego Dorgam","email":"diego.dorgam@rocket.chat"},{"name":"Rodrigo Nascimento","email":"rodrigo.nascimento@rocket.chat"},{"name":"Aaron Ogle","email":"aaron.ogle@rocket.chat"},{"name":"Diego Sampaio","email":"diego.sampaio@rocket.chat"}],"description":"Hubot Rocket.Chat Chatbot with Natural Language Processing","keywords":["nlp","hubot","natural","rocketchat","rocket","chat"],"license":"MIT","repository":{"type":"git","url":"git+https://github.com/RocketChat/hubot-natural.git"},"bugs":{"url":"https://github.com/RocketChat/hubot-natural/issues","email":"support@rocket.chat"},"dependencies":{"coffeescript":"^2.2.2","hubot":"^3.0.1","hubot-redis-brain":"0.0.4","hubot-rocketchat":"^2.0.0","js-yaml":"^3.2.5","natural":"^0.5.6","webworker-threads":"0.7.13"},"engines":{"node":"> 8.0.0","npm":"> 5.0.0"},"gitHead":"39f1d4afc572e1109bd81a90ab422f29ba9e4fcc","homepage":"https://github.com/RocketChat/hubot-natural#readme","_id":"hubot-natural@0.1.0","_npmVersion":"5.6.0","_nodeVersion":"8.11.1","_npmUser":{"name":"diegodorgam","email":"diego.dorgam@rocket.chat"},"dist":{"integrity":"sha512-3nXRBNUwhEMQ2BTHG9lBfbfiRomRud/0TL9NWtKLhxudc1FBu6zOXqOphCv00X5sx21RlWC9p8J6Ai3GRvhmyw==","shasum":"365ddf48a00d2b349557a0a925686aea4c29f1ed","tarball":"https://registry.npmjs.org/hubot-natural/-/hubot-natural-0.1.0.tgz","fileCount":21,"unpackedSize":270844,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa6OyOCRA9TVsSAnZWagAAno0QAISGVJ8VcuKBgRwzT2gu\nVPKcTBr2TLnhQH9jbB42sQndbn2kL8aXPjh/c+gfFWw7IzUTo6K5TZ9ObaNg\nD0sNbZq1eip0qGhoaMDSzjEgdDOe1oP+EI0b+7JKubZvPwpoOIxG7Qqd6J0Q\nmtJHp19L0CDqkjm1Y+2ilzu4RRvTJdEROww4fzu6zmlEIm1flAQQRV6jFmse\niG4wIl2pcwFtFisMyhktKsHVTJI8wUf/ZHJAPjDWrC7EFl2b4UWYZesjJf8h\nL6Q1bBBYAjqRzwP4QfefYqBdkSdX/lrblvVrflxxGYi5dGftFGAKzpVR9Cdh\nxbCSGewfukBupzeeMvJWOFuB9/qb2/3H1DHARAa/EPxvgGkfC9vRc9EOEs7B\nm2K6tAGTvXW6ljHoSyXH3TeetemWHKcY5qHhlYGIW7auN5ouqcoQhwzt8JQ4\nGvO9B8BeB/C+1Oov6DWbLWf6cfC5GvK0aky551safvRS7jmAscLozjKlKwxp\nmm2Gl39lLMZritkETeZSoR9l7G3I1nplJa/llmTY8sBZBSzK9tWAo+mSeJDF\n6y/S3FLQoiaX5iIVaiuO5kdha4HN+U5m4DKGPC4cZYqXn+gPZgz+8VxsdvYc\njef3CVySL+lSYGEKnnMUi7TWEbLASbageOYxIrTb7YGsuubkLEUET7xdoNiE\nWpmZ\r\n=DLa+\r\n-----END PGP SIGNATURE-----\r\n"},"maintainers":[{"name":"diegodorgam","email":"diego.dorgam@rocket.chat"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/hubot-natural_0.1.0_1525214348295_0.12530478438793802"}}},"time":{"created":"2018-05-01T22:39:08.294Z","0.1.0":"2018-05-01T22:39:08.393Z","modified":"2018-05-01T22:39:16.233Z"},"maintainers":[{"name":"diegodorgam","email":"diego.dorgam@rocket.chat"}],"description":"Hubot Rocket.Chat Chatbot with Natural Language Processing","homepage":"https://github.com/RocketChat/hubot-natural#readme","keywords":["nlp","hubot","natural","rocketchat","rocket","chat"],"repository":{"type":"git","url":"git+https://github.com/RocketChat/hubot-natural.git"},"contributors":[{"name":"Diego Dorgam","email":"diego.dorgam@rocket.chat"},{"name":"Rodrigo Nascimento","email":"rodrigo.nascimento@rocket.chat"},{"name":"Aaron Ogle","email":"aaron.ogle@rocket.chat"},{"name":"Diego Sampaio","email":"diego.sampaio@rocket.chat"}],"author":{"name":"Rocket.Chat","url":"https://rocket.chat/"},"bugs":{"url":"https://github.com/RocketChat/hubot-natural/issues","email":"support@rocket.chat"},"license":"MIT","readme":"# Hubot Natural\n\n[![Build Status](https://travis-ci.org/RocketChat/hubot-natural.svg?branch=master)](https://travis-ci.org/RocketChat/hubot-natural)\n\n## Natural Language ChatBot\n\nHubot is one of the most famous bot creating framework on the web, that's because github made it easy to create. If you can define your commands in a RegExp param, basically you can do anything with Hubot. That's a great contribution to ChatOps culture.\n\nInspired by that, we wanted to provide the same simplicity to our community to develop chatbots that can actually process natural language and execute tasks, as easy as building RegExp oriented bots.\n\nSo, we've found a really charming project to initiate from, the [Digital Ocean's Heartbot](https://github.com/digitalocean/heartbot) _a shot of love to for your favorite chat client_ =)\n\nBased on Heartbot, we introduced some NLP power from [NaturalNode](https://github.com/NaturalNode/natural) team, an impressive collections of Natural Language Processing libs made to be used in NodeJS.\n\nAnd so, the _magic_ happens...\n\nWelcome to *HubotNatural*, a new an exciting chatbot framework based in Hubot and NaturalNode libs, with an simple and extensible architecture designed by Digital Ocean's HeartBot Team, made with love and care by Rocket.Chat Team.  \n\nWe hope you enjoy the project and find some time to contribute.  \n\n## How it Works\n\nHubotNatural is made to be easy to train and extend. So what you have to understand basically is that it has an YAML corpus, where you can design your chatbot interactions using nothing but YAML's notation.\n\nAll YAML interactions designed in corpus can have it's own parameters, which will be processed by an event class.\n\nEvent classes give the possibility to extend HubotNatural. By writing your own event classes you can give your chatbot the skills to interact with any services you need.\n\n### YAML corpus\n\nThe YAML file is loaded in `scripts/index.js`, parsed and passed to chatbot bind, which will be found in `scripts/bot/index.js`, the cortex of the bot, where all information flux and control are programmed.\n\nThe YAML corpus is located in `training_data/corpus.yml` and it's basic structure looks like this:  \n\n```yaml\ntrust: .85\ninteractions:\n  - name: salutation\n    expect:\n      - hi there\n      - hello everyone\n      - what's up bot\n      - good morning\n    answer:\n      - Hello there $user, how are you?\n      - Glad to be here...\n    event: respond\n    type: block\n```\n\nWhat this syntax means:\n\n- `trust`: the minimum level of certain that must be returned by the classifier in order to run this interaction. Value is 0 to 1 (0% to 100%). If a classifier returns a value of certainty minor than `trust`, the bots responds with and error interaction node.  \n- `interactions`: An vector with lots of interaction nodes that will be parsed. Every interaction designed to your chatbot must be under an interaction.node object structure.\n- `name`: that's the unique name of the interaction by which it will be identified. Do not create more than one interaction with the same `node.name` attribute.  \n- `expect`: Those are the sentences that will be given to the bots training. They can be strings or keywords vectors, like `['consume','use']`.   \n- `answer`: the messages that will be sent to the user, if the classifiers get classified above the trust level. The `node.message` will be parsed and sent by event class. You can specify variables in message. By default HubotNatural comes with `$user`, `$bot` and `$room` variables.  \n- `event`: is the name of the CoffeeScript or JavaScript Class inside `scripts/events`, without the file extension.  \n- `type`: This is an example of an event attribute. The type attribute is interpreted by respond.coffee class, and basically defines if all lines in message should be send as a `block` or if the bot should randomly send only one of the lines defined.\n\n### Event Coffee Classes\n\nEvent classes can be written to extend the chatbot skills. They receives the interaction object and parse the message, like this:  \n\n```yaml\nclass respond\n  constructor: (@interaction) ->\n  process: (msg) =>\n    type = @interaction.type?.toLowerCase() or 'random'\n    switch type\n      when 'block'\n        @interaction.answer.forEach (line) ->\n          message = msgVariables line, msg\n          msg['send'] message\n      when 'random'\n        message = stringElseRandomKey @interaction.answer\n        message = msgVariables message, msg\n        msg['send'] message\n\nmodule.exports = respond\n```\n\nIt's base constructor is the `@interaction` node so you can have access to all attributes inside an interaction just using `@interaction.attribute`. Here you can parse texts, call APIs, read files, access databases, and everything else you need.\n\n#### Logistic Regression Classifier\n\nThe NaturalNode library comes with two kinds of classifiers, the Naive Bayes classifier known as the `BayesClassifier` and the `LogisticRegressionClassifier` functions. By default, HubotNatural uses the `LogisticRegressionClassifier`. It just came with better results in our tests.\n\n#### PorterStemmer\n\nThere is also more than one kind of stemmer. You should set the stemmer to define your language. By default we use the PorterStemmerPt for portuguese, but you can find english, russian, italian, french, spanish and other stemmers in NaturalNode libs, or even write your own based on those.\n\nJust check inside `node_modules/natural/lib/natural/stemmers/`.\n\nTo change the stemmers language, just set the environment variable `HUBOT_LANG` as `pt`, `en`, `es`, and any other language termination that corresponds to a stemmer file inside the above directory.\n\n## Deploy with Docker\n\nWe have a Dockerfile that builds a lightweight image based in Linux Alpine with all the repository content so you can upload that image to a docker registry and deploy your chatbot from there.\n\nYou also can use `docker-compose.yml` file to load a local instance of Rocket.Chat, MongoDB and HubotNatural services, where you can change the parameters if you must.\n\nThe docker-compose file looks like this:\n\n```yaml\nversion: '2'\n\nservices:\n  rocketchat:\n    image: rocketchat/rocket.chat:latest\n    restart: unless-stopped\n    volumes:\n      - ./uploads:/app/uploads\n    environment:\n      - PORT=3000\n      - ROOT_URL=http://localhost:3000\n      - MONGO_URL=mongodb://mongo:27017/rocketchat\n      - MONGO_OPLOG_URL=mongodb://mongo:27017/local\n      - MAIL_URL=smtp://smtp.email\n#       - HTTP_PROXY=http://proxy.domain.com\n#       - HTTPS_PROXY=http://proxy.domain.com\n    depends_on:\n      - mongo\n    ports:\n      - 3000:3000\n\n  mongo:\n    image: mongo:3.2\n    restart: unless-stopped\n    volumes:\n     - ./data/db:/data/db\n     #- ./data/dump:/dump\n    command: mongod --smallfiles --oplogSize 128 --replSet rs0\n\n  mongo-init-replica:\n    image: mongo:3.2\n    command: 'mongo mongo/rocketchat --eval \"rs.initiate({ _id: ''rs0'', members: [ { _id: 0, host: ''localhost:27017'' } ]})\"'\n    depends_on:\n      - mongo\n\n  hubot-natural:\n    build: .\n    restart: unless-stopped\n    environment:\n      - HUBOT_ADAPTER=rocketchat\n      - HUBOT_NAME='Hubot Natural'\n      - HUBOT_OWNER=RocketChat\n      - HUBOT_DESCRIPTION='Hubot natural language processing'\n      - HUBOT_LOG_LEVEL=debug\n      - HUBOT_CORPUS=corpus.yml\n      - HUBOT_LANG=pt\n      - RESPOND_TO_DM=true\n      - RESPOND_TO_LIVECHAT=true\n      - RESPOND_TO_EDITED=true\n      - LISTEN_ON_ALL_PUBLIC=false\n      - ROCKETCHAT_AUTH=password\n      - ROCKETCHAT_URL=rocketchat:3000\n      - ROCKETCHAT_ROOM=GENERAL\n      - ROCKETCHAT_USER=botnat\n      - ROCKETCHAT_PASSWORD=botnatpass\n      - HUBOT_NATURAL_DEBUG_MODE=true\n    volumes:\n      - ./scripts:/home/hubotnat/bot/scripts\n      - ./training_data:/home/hubotnat/bot/training_data\n    depends_on:\n      - rocketchat\n    ports:\n      - 3001:8080\n```\n\nYou can change the attributes of variables and volumes to your specific needs and run `docker-compose up` in terminal to start the rocketchat service at `http://localhost:3000`.\n*ATTENTION:* You must remember that hubot must have a real rocketchat user created to login with. So by the first time you run this, you must first go into rocketchat and create a new user for hubot, change the `ROCKETCHAT_USER` and `ROCKETCHAT_PASSWORD` variables in the docker-compose.yml file, and then reload the services using `docker-compose stop && docker-compose up` to start it all over again.\n\nIf you want to run only the hubot-natural service to connect an already running instance of Rocket.Chat, you just need to remember to set the `ROCKETCHAT_URL` to a correct value, like `https://open.rocket.chat`.\n\n## Deploy with Hubot\n\nTo deploy HubotNatural, first you have to install yo hubot-generator:\n\n```shell\nnpm install -g yo generator-hubot\n```\n\nThen you will clone HubotNatural repository:  \n\n```shell\ngit clone https://github.com/RocketChat/hubot-natural.git mybot\n```\n\nChange 'mybot' in the git clone command above to whatever your bot's name will be, and install hubot binaries, without overwitting any of the files inside the folder:\n\n```shell\ncd mybot\nnpm install\nyo hubot\n\n                     _____________________________\n                    /                             \\\n   //\\              |      Extracting input for    |\n  ////\\    _____    |   self-replication process   |\n //////\\  /_____\\   \\                             /\n ======= |[^_/\\_]|   /----------------------------\n  |   | _|___@@__|__\n  +===+/  ///     \\_\\\n   | |_\\ /// HUBOT/\\\\\n   |___/\\//      /  \\\\\n         \\      /   +---+\n          \\____/    |   |\n           | //|    +===+\n            \\//      |xx|\n\n? Owner Diego <diego.dorgam@rocket.chat>\n? Bot name mybot\n? Description A simple helpful chatbot for your Company\n? Bot adapter rocketchat\n   create bin/hubot\n   create bin/hubot.cmd\n conflict Procfile\n? Overwrite Procfile? do not overwrite\n     skip Procfile\n conflict README.md\n? Overwrite README.md? do not overwrite\n     skip README.md\n   create external-scripts.json\n   create hubot-scripts.json\n conflict .gitignore\n? Overwrite .gitignore? do not overwrite\n     skip .gitignore\n conflict package.json\n? Overwrite package.json? do not overwrite\n     skip package.json\n   create scripts/example.coffee\n   create .editorconfig\n```\n\nNow, to run your chatbot in shell, you should run:  \n\n```shell\nbin/hubot\n```\n\nwait a minute for the loading process, and then you can talk to mybot.\n\nTake a look to adapters to run your bot in other platafforms.\n\n## Env Variables:\n\nIn your terminal window, run:\n\n```shell\nexport HUBOT_ADAPTER=rocketchat\nexport HUBOT_OWNER=RocketChat\nexport HUBOT_NAME='Bot Name'\nexport HUBOT_DESCRIPTION='Description of your bot'\nexport ROCKETCHAT_URL=https://open.rocket.chat\nexport ROCKETCHAT_ROOM=GENERAL\nexport LISTEN_ON_ALL_PUBLIC=false\nexport RESPOND_TO_DM=true\nexport RESPOND_TO_LIVECHAT=true\nexport ROCKETCHAT_USER=catbot\nexport ROCKETCHAT_PASSWORD='bot password'\nexport ROCKETCHAT_AUTH=password\nexport HUBOT_LOG_LEVEL=debug\nexport HUBOT_CORPUS='corpus.yml'\nexport HUBOT_LANG='en'\nbin/hubot -a rocketchat --name $HUBOT_NAME\n```  \n\nYou can check [hubot-rocketchat](https://github.com/RocketChat/hubot-rocketchat) adapter project for more details.\n\n### PM2 Json File\n\nAs NodeJS developers we learned to love [Process Manager PM2](http://pm2.keymetrics.io), and we really encourage you to use it.\n\n```shell\nnpm install pm2 -g\n```\n\nCreate a `mybot.json` file and jut set it's content as:  \n\n```json\n{\n\t\"apps\": [{\n\t\t\"name\": \"mybot\",\n\t\t\"interpreter\": \"/bin/bash\",\n\t\t\"watch\": true,\n\t\t\"ignore_watch\" : [\"client/img\"],\n\t\t\"script\": \"bin/hubot\",\n\t\t\"args\": \"-a rocketchat\",\n\t\t\"port\": \"3001\",\n\t\t\"env\": {\n\t\t\t\"ROCKETCHAT_URL\": \"https://localhost:3000\",\n\t\t\t\"ROCKETCHAT_ROOM\": \"general\",\n\t\t\t\"RESPOND_TO_DM\": true,\n\t\t\t\"ROCKETCHAT_USER\": \"mybot\",\n\t\t\t\"ROCKETCHAT_PASSWORD\": \"12345\",\n\t\t\t\"ROCKETCHAT_AUTH\": \"password\",\n\t\t\t\"HUBOT_LOG_LEVEL\": \"debug\"\n\t\t}\n\t}\n]\n}\n```\n\nYou can also instantiate more than one process with PM2, if you want for example to run more than one instance of your bot:  \n\n```json\n{\n\t\"apps\": [{\n\t\t\"name\": \"mybot.0\",\n\t\t\"interpreter\": \"/bin/bash\",\n\t\t\"watch\": true,\n\t\t\"ignore_watch\" : [\"client/img\"],\n\t\t\"script\": \"bin/hubot\",\n\t\t\"args\": \"-a rocketchat\",\n\t\t\"port\": \"3001\",\n\t\t\"env\": {\n\t\t\t\"ROCKETCHAT_URL\": \"https://localhost:3000\",\n\t\t\t\"ROCKETCHAT_ROOM\": \"general\",\n\t\t\t\"RESPOND_TO_DM\": true,\n\t\t\t\"ROCKETCHAT_USER\": \"mybot\",\n\t\t\t\"ROCKETCHAT_PASSWORD\": \"12345\",\n\t\t\t\"ROCKETCHAT_AUTH\": \"password\",\n\t\t\t\"HUBOT_LOG_LEVEL\": \"debug\"\n\t\t}\n\t}, {\n\t\t\"name\": \"mybot.1\",\n\t\t\"interpreter\": \"/bin/bash\",\n\t\t\"watch\": true,\n\t\t\"ignore_watch\" : [\"client/img\"],\n\t\t\"script\": \"bin/hubot\",\n\t\t\"args\": \"-a rocketchat\",\n\t\t\"port\": \"3002\",\n\t\t\"env\": {\n\t\t\t\"ROCKETCHAT_URL\": \"https://mycompany.rocket.chat\",\n\t\t\t\"ROCKETCHAT_ROOM\": \"general\",\n\t\t\t\"RESPOND_TO_DM\": true,\n\t\t\t\"ROCKETCHAT_USER\": \"mybot\",\n\t\t\t\"ROCKETCHAT_PASSWORD\": \"12345\",\n\t\t\t\"ROCKETCHAT_AUTH\": \"password\",\n\t\t\t\"HUBOT_LOG_LEVEL\": \"debug\"\n\t\t}\n\t}\n]\n}\n```\n\nAnd of course, you can go nuts setting configs for different plataforms, like facebook mensenger, twitter or telegram ;P.\n\n## Hubot Adapters\n\nHubot comes with at least 38 adapters, including Rocket.Chat addapter of course.  \nTo connect to your Rocket.Chat instance, you can set env variables, our config pm2 json file.\n\nCheckout other [hubot adapters](https://github.com/github/hubot/blob/master/docs/adapters.md) for more info.\n\n## Thanks to\n\nIn Rocket.Chat we are so in love by what we do that we couldn't forget to thanks everyone that made it possible!\n\n### Github Hubot Team\n\nThanks guys for this amazing framework, hubots lives in the heart of Rocket.Chat, and we recommend everyone to checkout https://hubot.github.com and find much much more about hubot!\n\n### Natural Node Project\n\nTo the NaturalNode Team our most sincere \"THAK YOU VERY MUCH!! We loved your project and we are excited to contribute!\".  \nCheckout https://github.com/NaturalNode/natural and let your mind blow!\n\n### Digital Ocean's Heartbot\n\nWe can not thanks Digital Ocean enough, not only for this beautifull [HeartBot project](https://github.com/digitalocean/heartbot), but also for all the great tutorials and all the contributions to OpenSource moviment.\n\n### Thanks to Our Community\n\nAnd for last but not least, thanks to our big community of contributors, testers, users, partners, and everybody who loves Rocket.Chat and made all this possible.\n","readmeFilename":"README.md","_attachments":{}}